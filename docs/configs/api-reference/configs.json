{
  "nft": {
    "getWalletNFTs": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get NFTs by wallet",
      "description": "Get NFTs owned by a given address.\n* The response will include status [SYNCED/SYNCING] based on the contracts being indexed.\n* Use the token_address param to get results for a specific contract only\n* Note that results will include all indexed NFTs\n* Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.",
      "method": "GET",
      "path": "/:address/nft",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the wallet",
          "required": true,
          "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        },
        {
          "name": "token_addresses",
          "description": "The addresses to get balances for (optional)",
          "required": false,
          "type": "array",
          "field": { "type": "string" }
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        },
        {
          "name": "normalizeMetadata",
          "description": "Should normalized metadata be returned?",
          "required": false,
          "type": "boolean"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of NFT owners",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "status",
                "type": "string",
                "description": "The syncing status of the address [SYNCING/SYNCED]",
                "example": "SYNCING"
              },
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "owner_of",
                    "type": "string",
                    "description": "The wallet address of the owner of the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number when the amount or owner changed",
                    "example": "88256"
                  },
                  {
                    "name": "block_number_minted",
                    "type": "string",
                    "description": "The block number when the NFT was minted",
                    "example": "88256"
                  },
                  {
                    "name": "token_uri",
                    "type": "string",
                    "description": "The URI to the metadata of the token"
                  },
                  {
                    "name": "metadata",
                    "type": "string",
                    "description": "The metadata of the token"
                  },
                  {
                    "name": "normalized_metadata",
                    "description": "A normalized metadata version of the NFT's metadata.",
                    "type": "object",
                    "fields": [
                      {
                        "name": "name",
                        "type": "string",
                        "description": "The name or title of the NFT",
                        "example": "Moralis Mug"
                      },
                      {
                        "name": "description",
                        "type": "string",
                        "description": "A detailed description of the NFT",
                        "example": "Moralis Coffee nug 3D Asset that can be used in 3D worldspaces. This NFT is presented as a flat PNG, a Unity3D Prefab and a standard fbx."
                      },
                      {
                        "name": "image",
                        "type": "string",
                        "description": "The URL of the NFT's image",
                        "example": "https://arw2wxg84h6b.moralishost.com:2053/server/files/tNJatzsHirx4V2VAep6sc923OYGxvkpBeJttR7Ks/de504bbadadcbe30c86278342fcf2560_moralismug.png"
                      },
                      {
                        "name": "external_link",
                        "type": "string",
                        "description": "A link to additional information",
                        "example": "https://giphy.com/gifs/loop-recursion-ting-aaODAv1iuQdgI"
                      },
                      {
                        "name": "animation_url",
                        "type": "string",
                        "description": "An animated version of the NFT's image",
                        "example": "https://giphy.com/gifs/food-design-donuts-o9ngTPVYW4qo8"
                      },
                      {
                        "name": "attributes",
                        "type": "array",
                        "field": {
                          "type": "object",
                          "fields": [
                            {
                              "name": "trait_type",
                              "type": "string",
                              "description": "The trait title or descriptor",
                              "example": "Eye Color"
                            },
                            {
                              "name": "value",
                              "type": "string",
                              "description": "The value of the attribute",
                              "example": "hazel"
                            },
                            {
                              "name": "display_type",
                              "type": "string",
                              "description": "The type the attribute value should be displayed as",
                              "example": "string"
                            },
                            {
                              "name": "max_value",
                              "type": "number",
                              "description": "For numeric values, the upper range",
                              "example": 100
                            },
                            {
                              "name": "trait_count",
                              "type": "number",
                              "description": "The number of possible values for this trait",
                              "example": 7
                            },
                            {
                              "name": "order",
                              "type": "number",
                              "description": "Order the trait should appear in the attribute list.",
                              "example": 1
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The number of this item the user owns (used by ERC1155)",
                    "example": "1"
                  },
                  {
                    "name": "name",
                    "type": "string",
                    "description": "The name of the NFT contract",
                    "example": "CryptoKitties"
                  },
                  {
                    "name": "symbol",
                    "type": "string",
                    "description": "The symbol of the NFT contract",
                    "example": "RARI"
                  },
                  {
                    "name": "token_hash",
                    "type": "string",
                    "description": "The token hash",
                    "example": "502cee781b0fb40ea02508b21d319ced"
                  },
                  {
                    "name": "last_token_uri_sync",
                    "type": "string",
                    "description": "When the token_uri was last updated",
                    "example": "2021-02-24T00:47:26.647Z"
                  },
                  {
                    "name": "last_metadata_sync",
                    "type": "string",
                    "description": "When the metadata was last updated",
                    "example": "2021-02-24T00:47:26.647Z"
                  }
                ]
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetNFTs(IWeb3Api web3Api, string address)\n{\n    bool result = true;\n    try\n    {\n        NftOwnerCollection resp = await web3Api.Account.GetNFTs(address.ToLower(), ChainList.eth);\n        result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n    return result;\n}\n",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"limit\": 0, \n    \"token_addresses\": [], \n    \"cursor\": \"\", \n    \"normalizeMetadata\": True, \n}\n\nresult = evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getMultipleNFTs": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get Multiple NFTs",
      "description": "Returns an array of NFTs specified in the request.\n* Note that results will include all indexed NFTs\n* Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.\n* Only 25 NFTs can be fetched in one API call.",
      "method": "POST",
      "path": "/nft/getMultipleNFTs",
      "pathParams": [],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        }
      ],
      "bodyParam": {
        "required": true,
        "description": "Body",
        "type": "object",
        "fields": [
          {
            "name": "tokens",
            "type": "array",
            "description": "The tokens to be fetched (max 25 tokens)",
            "example": [
              {
                "token_address": "0xa4991609c508b6d4fb7156426db0bd49fe298bd8",
                "token_id": "12"
              },
              {
                "token_address": "0x3c64dc415ebb4690d1df2b6216148c8de6dd29f7",
                "token_id": "1"
              },
              {
                "token_address": "0x3c64dc415ebb4690d1df2b6216148c8de6dd29f7",
                "token_id": "200"
              }
            ],
            "field": {
              "type": "object",
              "fields": [
                {
                  "name": "token_address",
                  "type": "string",
                  "description": "The contract address",
                  "example": "0x06012c8cf97bead5deae237070f9587f8e7a266d"
                },
                {
                  "name": "token_id",
                  "type": "string",
                  "description": "The id of the token",
                  "example": 100
                }
              ]
            }
          },
          {
            "name": "normalizeMetadata",
            "type": "boolean",
            "description": "Should normalized metadata be returned?",
            "example": false
          }
        ]
      },
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of NFTs",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "tokens",
                "required": true,
                "type": "array",
                "maxItems": 25,
                "description": "The tokens to be fetched (max 25 tokens)",
                "example": [
                  {
                    "token_address": "0xa4991609c508b6d4fb7156426db0bd49fe298bd8",
                    "token_id": "12"
                  },
                  {
                    "token_address": "0x3c64dc415ebb4690d1df2b6216148c8de6dd29f7",
                    "token_id": "1"
                  },
                  {
                    "token_address": "0x3c64dc415ebb4690d1df2b6216148c8de6dd29f7",
                    "token_id": "200"
                  }
                ],
                "field": {
                  "type": "object",
                  "fields": [
                    {
                      "name": "token_address",
                      "type": "string",
                      "description": "The contract address",
                      "example": "0x06012c8cf97bead5deae237070f9587f8e7a266d"
                    },
                    {
                      "name": "token_id",
                      "type": "string",
                      "description": "The id of the token",
                      "example": 100
                    }
                  ]
                }
              },
              {
                "name": "normalizeMetadata",
                "type": "boolean",
                "description": "Should normalized metadata be returned?",
                "example": false
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"chain\": \"eth\", \n}\nbody = {\n    \"tokens\": [{'token_address': '0xa4991609c508b6d4fb7156426db0bd49fe298bd8', 'token_id': '12'}, {'token_address': '0x3c64dc415ebb4690d1df2b6216148c8de6dd29f7', 'token_id': '1'}, {'token_address': '0x3c64dc415ebb4690d1df2b6216148c8de6dd29f7', 'token_id': '200'}], \n    \"normalizeMetadata\": False, \n}\n\nresult = evm_api.nft.get_multiple_nfts(\n    api_key=api_key,\n    params=params,\n    body=body,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getWalletNFTTransfers": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get NFT transfers by wallet",
      "description": "Get transfers of NFTs given the wallet and other parameters.",
      "method": "GET",
      "path": "/:address/nft/transfers",
      "pathParams": [
        {
          "name": "address",
          "description": "The wallet address of the sender or recipient of the transfers",
          "required": true,
          "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "direction",
          "description": "The transfer direction",
          "required": false,
          "example": "both",
          "type": "string"
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "To get the reserves at this block number",
          "required": false,
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of NFT transfers",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The address that sent the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The address that received the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                    "example": "1000000000000000"
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The number of tokens transferred",
                    "example": "1"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number of the transaction",
                    "example": "88256"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-06-04T16:00:15"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash of the transaction"
                  },
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "transaction_type",
                    "type": "string",
                    "description": "The transaction type"
                  },
                  {
                    "name": "transaction_index",
                    "type": "number",
                    "description": "The transaction index"
                  },
                  {
                    "name": "log_index",
                    "type": "number",
                    "description": "The log index"
                  },
                  {
                    "name": "operator",
                    "type": "string",
                    "description": "The operator present only for ERC1155 transfers",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  }
                ]
              },
              {
                "name": "block_exists",
                "type": "boolean",
                "description": "Indicator if the block exists",
                "example": true
              },
              {
                "name": "index_complete",
                "type": "boolean",
                "description": "Indicator if the block is fully indexed",
                "example": true
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getWalletNFTTransfers({\n        address,\n        chain,\n    });\n\n    console.log(response);\n} catch (e) {\n    console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetNFTTransfers(IWeb3Api web3Api, string address)\n{\n    bool result = true;\n    try\n    {\n        NftTransferCollection balance = await web3Api.Account.GetNFTTransfers(address.ToLower(), ChainList.eth);\n        result = balance is { } && balance.Result is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n    return result;\n}\n",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"direction\": \"both\", \n    \"from_block\": 0, \n    \"to_block\": \"\", \n    \"limit\": 0, \n    \"cursor\": \"\", \n}\n\nresult = evm_api.nft.get_wallet_nft_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getWalletNFTCollections": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get NFT collections by wallet",
      "description": "Get NFT collections owned by a given wallet address.",
      "method": "GET",
      "path": "/:address/nft/collections",
      "pathParams": [
        {
          "name": "address",
          "description": "The wallet address of the owner of NFTs in the collections",
          "required": true,
          "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the NFT collections owned by a wallet",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "status",
                "type": "string",
                "description": "The syncing status of the address [SYNCING/SYNCED]",
                "example": "SYNCING"
              },
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "name",
                    "type": "string",
                    "description": "The name of the NFT contract",
                    "example": "CryptoKitties"
                  },
                  {
                    "name": "symbol",
                    "type": "string",
                    "description": "The symbol of the NFT contract",
                    "example": "RARI"
                  }
                ]
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getWalletNFTCollections({\n        address,\n        chain,\n    });\n\n    console.log(response);\n} catch (e) {\n    console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\", \n    \"chain\": \"eth\", \n    \"limit\": 0, \n    \"cursor\": \"\", \n}\n\nresult = evm_api.nft.get_wallet_nft_collections(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getContractNFTs": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get NFTs by contract",
      "description": "Get NFTs for a given contract address, including metadata for all NFTs (where available).\n* Results are limited to 100 per page by default\n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.",
      "method": "GET",
      "path": "/nft/:address",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "totalRanges",
          "description": "The number of subranges to split the results into",
          "required": false,
          "type": "number"
        },
        {
          "name": "range",
          "description": "The desired subrange to query",
          "required": false,
          "type": "number"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        },
        {
          "name": "normalizeMetadata",
          "description": "Should normalized metadata be returned?",
          "required": false,
          "type": "boolean"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of NFTs",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "owner_of",
                    "type": "string",
                    "description": "The wallet address of the owner of the NFT",
                    "example": "0x9c83ff0f1c8924da96cb2fcb7e093f78eb2e316b"
                  },
                  {
                    "name": "token_hash",
                    "type": "string",
                    "description": "The token hash",
                    "example": "502cee781b0fb40ea02508b21d319ced"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number when the amount or owner changed",
                    "example": "88256"
                  },
                  {
                    "name": "block_number_minted",
                    "type": "string",
                    "description": "The block number when the NFT was minted",
                    "example": "88256"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "token_uri",
                    "type": "string",
                    "description": "The URI to the metadata of the token"
                  },
                  {
                    "name": "metadata",
                    "type": "string",
                    "description": "The metadata of the token"
                  },
                  {
                    "name": "normalized_metadata",
                    "description": "A normalized metadata version of the NFT's metadata.",
                    "type": "object",
                    "fields": [
                      {
                        "name": "name",
                        "type": "string",
                        "description": "The name or title of the NFT",
                        "example": "Moralis Mug"
                      },
                      {
                        "name": "description",
                        "type": "string",
                        "description": "A detailed description of the NFT",
                        "example": "Moralis Coffee nug 3D Asset that can be used in 3D worldspaces. This NFT is presented as a flat PNG, a Unity3D Prefab and a standard fbx."
                      },
                      {
                        "name": "image",
                        "type": "string",
                        "description": "The URL of the NFT's image",
                        "example": "https://arw2wxg84h6b.moralishost.com:2053/server/files/tNJatzsHirx4V2VAep6sc923OYGxvkpBeJttR7Ks/de504bbadadcbe30c86278342fcf2560_moralismug.png"
                      },
                      {
                        "name": "external_link",
                        "type": "string",
                        "description": "A link to additional information",
                        "example": "https://giphy.com/gifs/loop-recursion-ting-aaODAv1iuQdgI"
                      },
                      {
                        "name": "animation_url",
                        "type": "string",
                        "description": "An animated version of the NFT's image",
                        "example": "https://giphy.com/gifs/food-design-donuts-o9ngTPVYW4qo8"
                      },
                      {
                        "name": "attributes",
                        "type": "array",
                        "field": {
                          "type": "object",
                          "fields": [
                            {
                              "name": "trait_type",
                              "type": "string",
                              "description": "The trait title or descriptor",
                              "example": "Eye Color"
                            },
                            {
                              "name": "value",
                              "type": "string",
                              "description": "The value of the attribute",
                              "example": "hazel"
                            },
                            {
                              "name": "display_type",
                              "type": "string",
                              "description": "The type the attribute value should be displayed as",
                              "example": "string"
                            },
                            {
                              "name": "max_value",
                              "type": "number",
                              "description": "For numeric values, the upper range",
                              "example": 100
                            },
                            {
                              "name": "trait_count",
                              "type": "number",
                              "description": "The number of possible values for this trait",
                              "example": 7
                            },
                            {
                              "name": "order",
                              "type": "number",
                              "description": "Order the trait should appear in the attribute list.",
                              "example": 1
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "name": "minter_address",
                    "type": "string",
                    "description": "The address that minted the NFT",
                    "example": "0x9c83ff0f1c8924da96cb2fcb7e093f78eb2e316b"
                  },
                  {
                    "name": "last_token_uri_sync",
                    "type": "string",
                    "description": "When the token_uri was last updated"
                  },
                  {
                    "name": "last_metadata_sync",
                    "type": "string",
                    "description": "When the metadata was last updated"
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The quantity of this item that the user owns (used by ERC1155)",
                    "example": "1"
                  },
                  {
                    "name": "name",
                    "type": "string",
                    "description": "The name of the NFT contract",
                    "example": "CryptoKitties"
                  },
                  {
                    "name": "symbol",
                    "type": "string",
                    "description": "The symbol of the NFT contract",
                    "example": "RARI"
                  }
                ]
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const totalRanges = 1000;\n\n    const range = 1;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getContractNFTs({\n        address,\n        chain,\n        totalRanges,\n        range,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetAllTokenIds(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        NftCollection resp = await web3Api.Token.GetAllTokenIds(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", ChainList.eth, null, \"\", 10);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"limit\": 0, \n    \"totalRanges\": 0, \n    \"range\": 0, \n    \"cursor\": \"\", \n    \"normalizeMetadata\": True, \n}\n\nresult = evm_api.nft.get_contract_nfts(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getNFTOwners": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get NFT owners by contract",
      "description": "Get owners of NFTs for a given contract.\n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.",
      "method": "GET",
      "path": "/nft/:address/owners",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        },
        {
          "name": "normalizeMetadata",
          "description": "Should normalized metadata be returned?",
          "required": false,
          "type": "boolean"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of NFT owners",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "status",
                "type": "string",
                "description": "The syncing status of the address [SYNCING/SYNCED]",
                "example": "SYNCING"
              },
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "owner_of",
                    "type": "string",
                    "description": "The wallet address of the owner of the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number when the amount or owner changed",
                    "example": "88256"
                  },
                  {
                    "name": "block_number_minted",
                    "type": "string",
                    "description": "The block number when the NFT was minted",
                    "example": "88256"
                  },
                  {
                    "name": "token_uri",
                    "type": "string",
                    "description": "The URI to the metadata of the token"
                  },
                  {
                    "name": "metadata",
                    "type": "string",
                    "description": "The metadata of the token"
                  },
                  {
                    "name": "normalized_metadata",
                    "description": "A normalized metadata version of the NFT's metadata.",
                    "type": "object",
                    "fields": [
                      {
                        "name": "name",
                        "type": "string",
                        "description": "The name or title of the NFT",
                        "example": "Moralis Mug"
                      },
                      {
                        "name": "description",
                        "type": "string",
                        "description": "A detailed description of the NFT",
                        "example": "Moralis Coffee nug 3D Asset that can be used in 3D worldspaces. This NFT is presented as a flat PNG, a Unity3D Prefab and a standard fbx."
                      },
                      {
                        "name": "image",
                        "type": "string",
                        "description": "The URL of the NFT's image",
                        "example": "https://arw2wxg84h6b.moralishost.com:2053/server/files/tNJatzsHirx4V2VAep6sc923OYGxvkpBeJttR7Ks/de504bbadadcbe30c86278342fcf2560_moralismug.png"
                      },
                      {
                        "name": "external_link",
                        "type": "string",
                        "description": "A link to additional information",
                        "example": "https://giphy.com/gifs/loop-recursion-ting-aaODAv1iuQdgI"
                      },
                      {
                        "name": "animation_url",
                        "type": "string",
                        "description": "An animated version of the NFT's image",
                        "example": "https://giphy.com/gifs/food-design-donuts-o9ngTPVYW4qo8"
                      },
                      {
                        "name": "attributes",
                        "type": "array",
                        "field": {
                          "type": "object",
                          "fields": [
                            {
                              "name": "trait_type",
                              "type": "string",
                              "description": "The trait title or descriptor",
                              "example": "Eye Color"
                            },
                            {
                              "name": "value",
                              "type": "string",
                              "description": "The value of the attribute",
                              "example": "hazel"
                            },
                            {
                              "name": "display_type",
                              "type": "string",
                              "description": "The type the attribute value should be displayed as",
                              "example": "string"
                            },
                            {
                              "name": "max_value",
                              "type": "number",
                              "description": "For numeric values, the upper range",
                              "example": 100
                            },
                            {
                              "name": "trait_count",
                              "type": "number",
                              "description": "The number of possible values for this trait",
                              "example": 7
                            },
                            {
                              "name": "order",
                              "type": "number",
                              "description": "Order the trait should appear in the attribute list.",
                              "example": 1
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The number of this item the user owns (used by ERC1155)",
                    "example": "1"
                  },
                  {
                    "name": "name",
                    "type": "string",
                    "description": "The name of the NFT contract",
                    "example": "CryptoKitties"
                  },
                  {
                    "name": "symbol",
                    "type": "string",
                    "description": "The symbol of the NFT contract",
                    "example": "RARI"
                  },
                  {
                    "name": "token_hash",
                    "type": "string",
                    "description": "The token hash",
                    "example": "502cee781b0fb40ea02508b21d319ced"
                  },
                  {
                    "name": "last_token_uri_sync",
                    "type": "string",
                    "description": "When the token_uri was last updated",
                    "example": "2021-02-24T00:47:26.647Z"
                  },
                  {
                    "name": "last_metadata_sync",
                    "type": "string",
                    "description": "When the metadata was last updated",
                    "example": "2021-02-24T00:47:26.647Z"
                  }
                ]
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTOwners({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetNFTOwners(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        NftOwnerCollection resp = await web3Api.Token.GetNFTOwners(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", ChainList.eth, null, \"\", 10);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"limit\": 0, \n    \"cursor\": \"\", \n    \"normalizeMetadata\": True, \n}\n\nresult = evm_api.nft.get_nft_owners(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getNFTContractTransfers": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get NFT transfers by contract",
      "description": "Get transfers of NFTs for a given contract and other parameters.",
      "method": "GET",
      "path": "/nft/:address/transfers",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "from_block",
          "description": "The minimum block number from where to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from where to get the transfers.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "from_date",
          "description": "The date from where to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get transfers up until this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of NFT transfers",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The address that sent the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The address that received the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                    "example": "1000000000000000"
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The number of tokens transferred",
                    "example": "1"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number of the transaction",
                    "example": "88256"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-06-04T16:00:15"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash of the transaction"
                  },
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "transaction_type",
                    "type": "string",
                    "description": "The transaction type"
                  },
                  {
                    "name": "transaction_index",
                    "type": "number",
                    "description": "The transaction index"
                  },
                  {
                    "name": "log_index",
                    "type": "number",
                    "description": "The log index"
                  },
                  {
                    "name": "operator",
                    "type": "string",
                    "description": "The operator present only for ERC1155 transfers",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  }
                ]
              },
              {
                "name": "block_exists",
                "type": "boolean",
                "description": "Indicator if the block exists",
                "example": true
              },
              {
                "name": "index_complete",
                "type": "boolean",
                "description": "Indicator if the block is fully indexed",
                "example": true
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTContractTransfers({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetContractNFTTransfers(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        NftTransferCollection resp = await web3Api.Token.GetContractNFTTransfers(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", ChainList.eth, null, \"\", 10);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"limit\": 0, \n    \"cursor\": \"\", \n}\n\nresult = evm_api.nft.get_nft_contract_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getNFTTransfersFromToBlock": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get NFT transfers from a block to a block",
      "description": "Get transfers of NFTs from a block number to a block number.",
      "method": "GET",
      "path": "/nft/transfers",
      "pathParams": [],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from which to get the transfers.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "from_date",
          "description": "The start date from which to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "The end date from which to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (for getting the next page)\n",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of NFT transfers",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The address that sent the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The address that received the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                    "example": "1000000000000000"
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The number of tokens transferred",
                    "example": "1"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number of the transaction",
                    "example": "88256"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-06-04T16:00:15"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash of the transaction"
                  },
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "transaction_type",
                    "type": "string",
                    "description": "The transaction type"
                  },
                  {
                    "name": "transaction_index",
                    "type": "number",
                    "description": "The transaction index"
                  },
                  {
                    "name": "log_index",
                    "type": "number",
                    "description": "The log index"
                  },
                  {
                    "name": "operator",
                    "type": "string",
                    "description": "The operator present only for ERC1155 transfers",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  }
                ]
              },
              {
                "name": "block_exists",
                "type": "boolean",
                "description": "Indicator if the block exists",
                "example": true
              },
              {
                "name": "index_complete",
                "type": "boolean",
                "description": "Indicator if the block is fully indexed",
                "example": true
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTTransfersFromToBlock({\n        from_block: \"14876000\",\n        to_block: \"14877000\",\n        format: \"decimal\",\n        limit: \"10\",\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetNftTransfersFromToBlock(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        // Fails same in Admin Consel - Invalid HEX values\n        NftTransferCollection resp = await web3Api.Token.GetNftTransfersFromToBlock(ChainList.eth, \"\", 99999, 25999999, null, null, null, 10);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"chain\": \"eth\", \n    \"from_block\": 0, \n    \"to_block\": 0, \n    \"from_date\": \"\", \n    \"to_date\": \"\", \n    \"format\": \"decimal\", \n    \"limit\": 0, \n    \"cursor\": \"\", \n}\n\nresult = evm_api.nft.get_nft_transfers_from_to_block(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getNFTTransfersByBlock": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get NFT transfers by block",
      "description": "Get transfers of NFTs given a block number or block hash.",
      "method": "GET",
      "path": "/block/:block_number_or_hash/nft/transfers",
      "pathParams": [
        {
          "name": "block_number_or_hash",
          "description": "The block number or block hash",
          "required": true,
          "example": "15846571",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the contents of a block",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The address that sent the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The address that received the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                    "example": "1000000000000000"
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The number of tokens transferred",
                    "example": "1"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number of the transaction",
                    "example": "88256"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-06-04T16:00:15"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash of the transaction"
                  },
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "transaction_type",
                    "type": "string",
                    "description": "The transaction type"
                  },
                  {
                    "name": "transaction_index",
                    "type": "number",
                    "description": "The transaction index"
                  },
                  {
                    "name": "log_index",
                    "type": "number",
                    "description": "The log index"
                  },
                  {
                    "name": "operator",
                    "type": "string",
                    "description": "The operator present only for ERC1155 transfers",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  }
                ]
              },
              {
                "name": "block_exists",
                "type": "boolean",
                "description": "Indicator if the block exists",
                "example": true
              },
              {
                "name": "index_complete",
                "type": "boolean",
                "description": "Indicator if the block is fully indexed",
                "example": true
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTTransfersByBlock({\n        blockNumberOrHash,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetNFTTransfersByBlock(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        NftTransferCollection nftTransfers = await web3Api.Native.GetNFTTransfersByBlock(\"500000\", ChainList.eth);\n         result = nftTransfers is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"block_number_or_hash\": \"15846571\", \n    \"chain\": \"eth\", \n    \"limit\": 0, \n    \"cursor\": \"\", \n}\n\nresult = evm_api.nft.get_nft_transfers_by_block(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getNFTTrades": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get NFT trades by marketplace",
      "description": "Get trades of NFTs for a given contract and marketplace.",
      "method": "GET",
      "path": "/nft/:address/trades",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The block number to get the trades from",
          "required": false,
          "type": "string"
        },
        {
          "name": "from_date",
          "description": "The start date from which to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "The end date from which to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "marketplace",
          "description": "Marketplace from which to get the trades (only OpenSea is supported at the moment)",
          "required": false,
          "example": "opensea",
          "type": "string"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "required": false,
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the trades",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "transaction_index",
                    "type": "string",
                    "description": "The transaction index"
                  },
                  {
                    "name": "token_ids",
                    "type": "array",
                    "description": "The token ID(s) traded",
                    "example": ["15", "54"],
                    "field": { "type": "string", "example": "15" }
                  },
                  {
                    "name": "seller_address",
                    "type": "string",
                    "description": "The address that sold the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "buyer_address",
                    "type": "string",
                    "description": "The address that bought the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "marketplace_address",
                    "type": "string",
                    "description": "The address of the contract that traded the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "price",
                    "type": "string",
                    "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                    "example": "1000000000000000"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-06-04T16:00:15"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number of the transaction",
                    "example": "13680123"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash",
                    "example": "0x4a7c916ca4a970358b9df90051008f729685ff05e9724a9dddba32630c37cb96"
                  }
                ]
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTTrades({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetNFTTrades(IWeb3Api web3Api)\n{\n    bool result = true;\n    try\n    {\n        TradeCollection resp = await web3Api.Token.GetNFTTrades(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", ChainList.eth, null, null, null, null, null, null, \"\", 10);\n        result = resp is { };\n    }\n    catch (Exception exp) { result = false; }\n    return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"chain\": \"eth\", \n    \"from_block\": 0, \n    \"to_block\": \"\", \n    \"from_date\": \"\", \n    \"to_date\": \"\", \n    \"marketplace\": \"opensea\", \n    \"cursor\": \"\", \n    \"limit\": 0, \n}\n\nresult = evm_api.nft.get_nft_trades(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getNFTContractMetadata": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get NFT collection metadata",
      "description": "Get the collection / contract level metadata for a given contract (name, symbol, base token URI).\n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n",
      "method": "GET",
      "path": "/nft/:address/metadata",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the metadata for an NFT collection.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "token_address",
                "type": "string",
                "description": "The address of the token contract",
                "example": "0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09"
              },
              {
                "name": "name",
                "type": "string",
                "description": "The name of the token contract",
                "example": "KryptoKitties"
              },
              {
                "name": "synced_at",
                "type": "string",
                "description": "Timestamp of when the contract was last synced with the node"
              },
              {
                "name": "symbol",
                "type": "string",
                "description": "The symbol of the NFT contract",
                "example": "RARI"
              },
              {
                "name": "contract_type",
                "type": "string",
                "description": "The type of NFT contract",
                "example": "ERC721"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTContractMetadata({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetNFTMetadata(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        NftContractMetadata resp = await web3Api.Token.GetNFTMetadata(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", ChainList.eth);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"chain\": \"eth\", \n}\n\nresult = evm_api.nft.get_nft_contract_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getNFTMetadata": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get NFT metadata",
      "description": "Get NFT data, including metadata (where available), for the given NFT token ID and contract address.\n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n",
      "method": "GET",
      "path": "/nft/:address/:token_id",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        },
        {
          "name": "token_id",
          "description": "The ID of the token",
          "required": true,
          "example": "1",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "normalizeMetadata",
          "description": "Should normalized metadata be returned?",
          "required": false,
          "type": "boolean"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the specified NFT.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "token_address",
                "type": "string",
                "description": "The address of the NFT contract",
                "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
              },
              {
                "name": "token_id",
                "type": "string",
                "description": "The token ID of the NFT",
                "example": "15"
              },
              {
                "name": "owner_of",
                "type": "string",
                "description": "The wallet address of the owner of the NFT",
                "example": "0x9c83ff0f1c8924da96cb2fcb7e093f78eb2e316b"
              },
              {
                "name": "token_hash",
                "type": "string",
                "description": "The token hash",
                "example": "502cee781b0fb40ea02508b21d319ced"
              },
              {
                "name": "block_number",
                "type": "string",
                "description": "The block number when the amount or owner changed",
                "example": "88256"
              },
              {
                "name": "block_number_minted",
                "type": "string",
                "description": "The block number when the NFT was minted",
                "example": "88256"
              },
              {
                "name": "contract_type",
                "type": "string",
                "description": "The type of NFT contract standard",
                "example": "ERC721"
              },
              {
                "name": "token_uri",
                "type": "string",
                "description": "The URI to the metadata of the token"
              },
              {
                "name": "metadata",
                "type": "string",
                "description": "The metadata of the token"
              },
              {
                "name": "normalized_metadata",
                "description": "A normalized metadata version of the NFT's metadata.",
                "type": "object",
                "fields": [
                  {
                    "name": "name",
                    "type": "string",
                    "description": "The name or title of the NFT",
                    "example": "Moralis Mug"
                  },
                  {
                    "name": "description",
                    "type": "string",
                    "description": "A detailed description of the NFT",
                    "example": "Moralis Coffee nug 3D Asset that can be used in 3D worldspaces. This NFT is presented as a flat PNG, a Unity3D Prefab and a standard fbx."
                  },
                  {
                    "name": "image",
                    "type": "string",
                    "description": "The URL of the NFT's image",
                    "example": "https://arw2wxg84h6b.moralishost.com:2053/server/files/tNJatzsHirx4V2VAep6sc923OYGxvkpBeJttR7Ks/de504bbadadcbe30c86278342fcf2560_moralismug.png"
                  },
                  {
                    "name": "external_link",
                    "type": "string",
                    "description": "A link to additional information",
                    "example": "https://giphy.com/gifs/loop-recursion-ting-aaODAv1iuQdgI"
                  },
                  {
                    "name": "animation_url",
                    "type": "string",
                    "description": "An animated version of the NFT's image",
                    "example": "https://giphy.com/gifs/food-design-donuts-o9ngTPVYW4qo8"
                  },
                  {
                    "name": "attributes",
                    "type": "array",
                    "field": {
                      "type": "object",
                      "fields": [
                        {
                          "name": "trait_type",
                          "type": "string",
                          "description": "The trait title or descriptor",
                          "example": "Eye Color"
                        },
                        {
                          "name": "value",
                          "type": "string",
                          "description": "The value of the attribute",
                          "example": "hazel"
                        },
                        {
                          "name": "display_type",
                          "type": "string",
                          "description": "The type the attribute value should be displayed as",
                          "example": "string"
                        },
                        {
                          "name": "max_value",
                          "type": "number",
                          "description": "For numeric values, the upper range",
                          "example": 100
                        },
                        {
                          "name": "trait_count",
                          "type": "number",
                          "description": "The number of possible values for this trait",
                          "example": 7
                        },
                        {
                          "name": "order",
                          "type": "number",
                          "description": "Order the trait should appear in the attribute list.",
                          "example": 1
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "name": "minter_address",
                "type": "string",
                "description": "The address that minted the NFT",
                "example": "0x9c83ff0f1c8924da96cb2fcb7e093f78eb2e316b"
              },
              {
                "name": "last_token_uri_sync",
                "type": "string",
                "description": "When the token_uri was last updated"
              },
              {
                "name": "last_metadata_sync",
                "type": "string",
                "description": "When the metadata was last updated"
              },
              {
                "name": "amount",
                "type": "string",
                "description": "The quantity of this item that the user owns (used by ERC1155)",
                "example": "1"
              },
              {
                "name": "name",
                "type": "string",
                "description": "The name of the NFT contract",
                "example": "CryptoKitties"
              },
              {
                "name": "symbol",
                "type": "string",
                "description": "The symbol of the NFT contract",
                "example": "RARI"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const tokenId = '1';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTMetadata({\n        address,\n        chain,\n        tokenId,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetTokenIdMetadata(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        Nft resp = await web3Api.Token.GetTokenIdMetadata(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"10\", ChainList.eth);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"token_id\": \"1\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"normalizeMetadata\": True, \n}\n\nresult = evm_api.nft.get_nft_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getNFTTransfers": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get NFT transfers by token ID",
      "description": "Get transfers of an NFT given a contract address and token ID.",
      "method": "GET",
      "path": "/nft/:address/:token_id/transfers",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        },
        {
          "name": "token_id",
          "description": "The ID of the token",
          "required": true,
          "example": "1",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of NFT transfers",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The address that sent the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The address that received the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                    "example": "1000000000000000"
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The number of tokens transferred",
                    "example": "1"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number of the transaction",
                    "example": "88256"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-06-04T16:00:15"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash of the transaction"
                  },
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "transaction_type",
                    "type": "string",
                    "description": "The transaction type"
                  },
                  {
                    "name": "transaction_index",
                    "type": "number",
                    "description": "The transaction index"
                  },
                  {
                    "name": "log_index",
                    "type": "number",
                    "description": "The log index"
                  },
                  {
                    "name": "operator",
                    "type": "string",
                    "description": "The operator present only for ERC1155 transfers",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  }
                ]
              },
              {
                "name": "block_exists",
                "type": "boolean",
                "description": "Indicator if the block exists",
                "example": true
              },
              {
                "name": "index_complete",
                "type": "boolean",
                "description": "Indicator if the block is fully indexed",
                "example": true
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const tokenId = 1;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTTransfers({\n        address,\n        chain,\n        tokenId,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetWalletTokenIdTransfers(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        NftTransferCollection resp = await web3Api.Token.GetWalletTokenIdTransfers(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"10\", ChainList.eth, null, \"\", 10);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"token_id\": \"1\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"limit\": 0, \n    \"cursor\": \"\", \n}\n\nresult = evm_api.nft.get_nft_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getNFTTokenIdOwners": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get NFT owners by token ID",
      "description": "Get owners of a specific NFT given the contract address and token ID. \n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n",
      "method": "GET",
      "path": "/nft/:address/:token_id/owners",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        },
        {
          "name": "token_id",
          "description": "The ID of the token",
          "required": true,
          "example": "1",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        },
        {
          "name": "normalizeMetadata",
          "description": "Should normalized metadata be returned?",
          "required": false,
          "type": "boolean"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of NFTs with their respective owners.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "status",
                "type": "string",
                "description": "The syncing status of the address [SYNCING/SYNCED]",
                "example": "SYNCING"
              },
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
                  },
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "15"
                  },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "owner_of",
                    "type": "string",
                    "description": "The wallet address of the owner of the NFT",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number when the amount or owner changed",
                    "example": "88256"
                  },
                  {
                    "name": "block_number_minted",
                    "type": "string",
                    "description": "The block number when the NFT was minted",
                    "example": "88256"
                  },
                  {
                    "name": "token_uri",
                    "type": "string",
                    "description": "The URI to the metadata of the token"
                  },
                  {
                    "name": "metadata",
                    "type": "string",
                    "description": "The metadata of the token"
                  },
                  {
                    "name": "normalized_metadata",
                    "description": "A normalized metadata version of the NFT's metadata.",
                    "type": "object",
                    "fields": [
                      {
                        "name": "name",
                        "type": "string",
                        "description": "The name or title of the NFT",
                        "example": "Moralis Mug"
                      },
                      {
                        "name": "description",
                        "type": "string",
                        "description": "A detailed description of the NFT",
                        "example": "Moralis Coffee nug 3D Asset that can be used in 3D worldspaces. This NFT is presented as a flat PNG, a Unity3D Prefab and a standard fbx."
                      },
                      {
                        "name": "image",
                        "type": "string",
                        "description": "The URL of the NFT's image",
                        "example": "https://arw2wxg84h6b.moralishost.com:2053/server/files/tNJatzsHirx4V2VAep6sc923OYGxvkpBeJttR7Ks/de504bbadadcbe30c86278342fcf2560_moralismug.png"
                      },
                      {
                        "name": "external_link",
                        "type": "string",
                        "description": "A link to additional information",
                        "example": "https://giphy.com/gifs/loop-recursion-ting-aaODAv1iuQdgI"
                      },
                      {
                        "name": "animation_url",
                        "type": "string",
                        "description": "An animated version of the NFT's image",
                        "example": "https://giphy.com/gifs/food-design-donuts-o9ngTPVYW4qo8"
                      },
                      {
                        "name": "attributes",
                        "type": "array",
                        "field": {
                          "type": "object",
                          "fields": [
                            {
                              "name": "trait_type",
                              "type": "string",
                              "description": "The trait title or descriptor",
                              "example": "Eye Color"
                            },
                            {
                              "name": "value",
                              "type": "string",
                              "description": "The value of the attribute",
                              "example": "hazel"
                            },
                            {
                              "name": "display_type",
                              "type": "string",
                              "description": "The type the attribute value should be displayed as",
                              "example": "string"
                            },
                            {
                              "name": "max_value",
                              "type": "number",
                              "description": "For numeric values, the upper range",
                              "example": 100
                            },
                            {
                              "name": "trait_count",
                              "type": "number",
                              "description": "The number of possible values for this trait",
                              "example": 7
                            },
                            {
                              "name": "order",
                              "type": "number",
                              "description": "Order the trait should appear in the attribute list.",
                              "example": 1
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "name": "amount",
                    "type": "string",
                    "description": "The number of this item the user owns (used by ERC1155)",
                    "example": "1"
                  },
                  {
                    "name": "name",
                    "type": "string",
                    "description": "The name of the NFT contract",
                    "example": "CryptoKitties"
                  },
                  {
                    "name": "symbol",
                    "type": "string",
                    "description": "The symbol of the NFT contract",
                    "example": "RARI"
                  },
                  {
                    "name": "token_hash",
                    "type": "string",
                    "description": "The token hash",
                    "example": "502cee781b0fb40ea02508b21d319ced"
                  },
                  {
                    "name": "last_token_uri_sync",
                    "type": "string",
                    "description": "When the token_uri was last updated",
                    "example": "2021-02-24T00:47:26.647Z"
                  },
                  {
                    "name": "last_metadata_sync",
                    "type": "string",
                    "description": "When the metadata was last updated",
                    "example": "2021-02-24T00:47:26.647Z"
                  }
                ]
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const tokenId = 1;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTTokenIdOwners({\n        address,\n        chain,\n        tokenId,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetTokenIdOwners(IWeb3Api web3Api)\n{\n    bool result = true;\n    try\n    {\n        NftOwnerCollection resp = await web3Api.Token.GetTokenIdOwners(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"10\", ChainList.eth, null, \"\", 10);\n        result = resp is { };\n    }\n    catch (Exception exp) { result = false; }\n    return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"token_id\": \"1\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"limit\": 0, \n    \"cursor\": \"\", \n    \"normalizeMetadata\": True, \n}\n\nresult = evm_api.nft.get_nft_token_id_owners(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "syncNFTContract": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Resync NFT Contract",
      "description": "Initiates a sync of a previously non synced contract.",
      "method": "PUT",
      "path": "/nft/:address/sync",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        }
      ],
      "responses": [
        {
          "status": "201",
          "description": "Contract address was triggered for index."
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.syncNFTContract({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> SyncNFTContract(IWeb3Api web3Api)\n{\n    bool result = true;\n\n    try\n    {\n        bool resp = await web3Api.Token.SyncNFTContract(\"0x698d7D745B7F5d8EF4fdB59CeB660050b3599AC3\", ChainList.mumbai);\n        result = resp;\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n\n    return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"chain\": \"eth\", \n}\n\nresult = evm_api.nft.sync_nft_contract(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "reSyncMetadata": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Resync NFT metadata",
      "description": "Resync the metadata for an NFT\n* The metadata flag will request the NFT's metadata from an already existing token_uri\n* The uri (default) flag will fetch the latest token_uri from the given NFT contract address. In sync mode the metadata will also be fetched\n* The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding\n* The async mode (default) will make the endpoint asynchronous so we will wait for the task to be completed before responding\n",
      "method": "GET",
      "path": "/nft/:address/:token_id/metadata/resync",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        },
        {
          "name": "token_id",
          "description": "The ID of the token",
          "required": true,
          "example": "1",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "flag",
          "description": "The type of resync to operate",
          "required": false,
          "example": "uri",
          "type": "string"
        },
        {
          "name": "mode",
          "description": "To define the behaviour of the endpoint",
          "required": false,
          "example": "sync",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "(In sync mode) Resync request executed.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "status",
                "type": "string",
                "description": "The status of the resync request"
              }
            ]
          }
        },
        {
          "status": "202",
          "description": "The resync request was received and will be executed.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "status",
                "type": "string",
                "description": "The status of the resync request"
              }
            ]
          }
        },
        {
          "status": "404",
          "description": "(In sync mode) Resync request executed and metadata could not be updated.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "status",
                "type": "string",
                "description": "The status of the resync request"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const tokenId = 1;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.reSyncMetadata({\n        address,\n        chain,\n        tokenId,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> ReSyncMetadata(IWeb3Api web3Api)\n{\n    bool result = true;\n\n    try\n    {\n        bool resp = await web3Api.Token.ReSyncMetadata(\"0x698d7D745B7F5d8EF4fdB59CeB660050b3599AC3\", \"15310200874782\", ChainList.mumbai);\n        result = resp;\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n\n    return result;\n}\n\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"token_id\": \"1\", \n    \"chain\": \"eth\", \n    \"flag\": \"uri\", \n    \"mode\": \"sync\", \n}\n\nresult = evm_api.nft.re_sync_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getNFTLowestPrice": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get NFT lowest price",
      "description": "Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).",
      "method": "GET",
      "path": "/nft/:address/lowestprice",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the NFT contract",
          "required": true,
          "example": "0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "days",
          "description": "The number of days to look back to find the lowest price\nIf not provided 7 days will be the default\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "marketplace",
          "description": "Marketplace from which to get the trades (only OpenSea is supported at the moment)",
          "required": false,
          "example": "opensea",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the trade with the lowest price",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "transaction_hash",
                "type": "string",
                "description": "The transaction hash",
                "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
              },
              {
                "name": "transaction_index",
                "type": "string",
                "description": "The transaction index"
              },
              {
                "name": "token_ids",
                "type": "array",
                "description": "The token ID(s) traded",
                "example": ["15", "54"],
                "field": { "type": "string", "example": "15" }
              },
              {
                "name": "seller_address",
                "type": "string",
                "description": "The address that sold the NFT",
                "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
              },
              {
                "name": "buyer_address",
                "type": "string",
                "description": "The address that bought the NFT",
                "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
              },
              {
                "name": "marketplace_address",
                "type": "string",
                "description": "The address of the contract that traded the NFT",
                "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
              },
              {
                "name": "price",
                "type": "string",
                "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                "example": "1000000000000000"
              },
              {
                "name": "block_timestamp",
                "type": "string",
                "description": "The block timestamp",
                "example": "2021-06-04T16:00:15"
              },
              {
                "name": "block_number",
                "type": "string",
                "description": "The block number of the transaction",
                "example": "13680123"
              },
              {
                "name": "block_hash",
                "type": "string",
                "description": "The block hash",
                "example": "0x4a7c916ca4a970358b9df90051008f729685ff05e9724a9dddba32630c37cb96"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTLowestPrice({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetNFTLowestPrice(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        Trade resp = await web3Api.Token.GetNFTLowestPrice(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", ChainList.eth, 2000);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"chain\": \"eth\", \n    \"days\": 0, \n    \"marketplace\": \"opensea\", \n}\n\nresult = evm_api.nft.get_nft_lowest_price(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "searchNFTs": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Search NFTs",
      "description": "Get NFTs that match a given metadata search query.",
      "method": "GET",
      "path": "/nft/search",
      "pathParams": [],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "format",
          "description": "The format of the token ID",
          "required": false,
          "example": "decimal",
          "type": "string"
        },
        {
          "name": "q",
          "description": "The search string",
          "required": true,
          "type": "string"
        },
        {
          "name": "filter",
          "description": "What fields the search should match on. To look into the entire metadata set the value to 'global'. To have a better response time you can look into a specific field like name",
          "required": false,
          "example": "name",
          "type": "string"
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to start the search\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from which to end the search\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "from_date",
          "description": "The date from which to start the search (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get search results up until this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "type": "string"
        },
        {
          "name": "addresses",
          "description": "The addresses to get metadata for",
          "required": false,
          "type": "array",
          "field": { "type": "string" }
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "required": false,
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the matching NFTs",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "token_id",
                    "type": "string",
                    "description": "The token ID of the NFT",
                    "example": "889"
                  },
                  {
                    "name": "token_address",
                    "type": "string",
                    "description": "The address of the NFT contract",
                    "example": "0x8ce66ff0865570d1ff0bb0098fa41b4dc61e02e6"
                  },
                  {
                    "name": "token_uri",
                    "type": "string",
                    "description": "The URI to the metadata of the token",
                    "example": "https://ipfs.moralis.io:2053/ipfs/QmZZbo8u8zEWg7wtmZhJS2W718WL6FA95T4XdgmCcLp1SJ/889.json"
                  },
                  {
                    "name": "metadata",
                    "type": "string",
                    "description": "The metadata of the token",
                    "example": "{\"name\":\"Bape #889\",\"description\":\"The #1 metavestor clan (NFT/DAO) by a team with multi billion dollar company experience.\",\"image\":\"https://bapesclan.mypinata.cloud/ipfs/QmTSUD5JA6qHaC5t25mcXySfz19AV9u4Mb6Na7ntQ6tEwf/889.jpg\",\"attributes\":[{\"trait_type\":\"Background\",\"value\":\"Black\"},{\"trait_type\":\"Body\",\"value\":\"Man\"},{\"trait_type\":\"Dress\",\"value\":\"Suit Tie Blue\"},{\"trait_type\":\"Face\",\"value\":\"Pipe\"},{\"trait_type\":\"Eye\",\"value\":\"Eye\"}]}"
                  },
                  { "name": "is_valid", "type": "number", "example": "1" },
                  { "name": "syncing", "type": "number", "example": "2" },
                  { "name": "frozen", "type": "number", "example": "0" },
                  { "name": "resyncing", "type": "number", "example": "0" },
                  {
                    "name": "contract_type",
                    "type": "string",
                    "description": "The type of NFT contract standard",
                    "example": "ERC721"
                  },
                  {
                    "name": "token_hash",
                    "type": "string",
                    "example": "fffa3102469ce77f569893d16d5884f9"
                  },
                  {
                    "name": "batch_id",
                    "type": "string",
                    "example": "fd995c8a-f8b2-40cb-a407-f43e552638b4"
                  },
                  {
                    "name": "metadata_name",
                    "type": "string",
                    "example": "Bape #889"
                  },
                  {
                    "name": "metadata_description",
                    "type": "string",
                    "example": "The #1 metavestor clan (NFT/DAO) by a team with multi billion dollar company experience."
                  },
                  {
                    "name": "metadata_attributes",
                    "type": "string",
                    "example": "[{\"trait_type\":\"Background\",\"value\":\"Black\"},{\"trait_type\":\"Body\",\"value\":\"Man\"},{\"trait_type\":\"Dress\",\"value\":\"Suit Tie Blue\"},{\"trait_type\":\"Face\",\"value\":\"Pipe\"},{\"trait_type\":\"Eye\",\"value\":\"Eye\"}]"
                  },
                  {
                    "name": "block_number_minted",
                    "type": "string",
                    "example": "14265936"
                  },
                  { "name": "opensea_lookup", "type": "json", "example": null },
                  {
                    "name": "minter_address",
                    "type": "string",
                    "example": "0xdcf086e3f7954b38180daae1405569da86588bfe"
                  },
                  {
                    "name": "transaction_minted",
                    "type": "string",
                    "example": "0x2c8d7ec7a8439b0f67b50e93be63242de52e9b5cdfc7dc0aee80c6a2f104c41a"
                  },
                  {
                    "name": "frozen_log_index",
                    "type": "json",
                    "example": null
                  },
                  { "name": "imported", "type": "json", "example": null },
                  {
                    "name": "last_token_uri_sync",
                    "type": "string",
                    "description": "When the token_uri was last updated",
                    "example": "2021-02-24T00:47:26.647Z"
                  },
                  {
                    "name": "last_metadata_sync",
                    "type": "string",
                    "description": "When the metadata was last updated",
                    "example": "2021-02-24T00:47:26.647Z"
                  },
                  {
                    "name": "createdAt",
                    "type": "string",
                    "example": "2022-02-24T00:47:26.647Z"
                  },
                  {
                    "name": "updatedAt",
                    "type": "string",
                    "example": "2022-04-09T23:56:44.807Z"
                  }
                ]
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const q = 'Pancake';\n\n    const filter = 'name';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.searchNFTs({\n        q,\n        filter,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> SearchNFTs(IWeb3Api web3Api)\n{\n    bool result = true;\n    try\n    {\n        NftMetadataCollection resp = await web3Api.Token.SearchNFTs(\"Apes\", ChainList.eth, null, null, null, null, null, null, \"\", 10);\n        result = resp is { };\n    }\n    catch (Exception exp) { result = false; }\n    return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"q\": \"\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"filter\": \"name\", \n    \"from_block\": 0, \n    \"to_block\": 0, \n    \"from_date\": \"\", \n    \"to_date\": \"\", \n    \"addresses\": [], \n    \"cursor\": \"\", \n    \"limit\": 0, \n}\n\nresult = evm_api.nft.search_nfts(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    }
  },
  "token": {
    "getTokenPrice": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get ERC20 token price",
      "description": "Get the token price denominated in the blockchain's native token and USD.",
      "method": "GET",
      "path": "/erc20/:address/price",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the token contract",
          "required": true,
          "example": "0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "exchange",
          "description": "The factory name or address of the token exchange",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_block",
          "description": "The block number from which the token price should be checked",
          "required": false,
          "type": "number"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the price denominated in the blockchain's native token and USD for a given token contract address",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "nativePrice",
                "type": "object",
                "fields": [
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The native price of the token",
                    "example": "8409770570506626",
                    "required": true
                  },
                  {
                    "name": "decimals",
                    "type": "integer",
                    "description": "The number of decimals on the token",
                    "example": 18,
                    "required": true
                  },
                  {
                    "name": "name",
                    "type": "string",
                    "description": "The name of the token",
                    "example": "Ether",
                    "required": true
                  },
                  {
                    "name": "symbol",
                    "type": "string",
                    "description": "The symbol of the token",
                    "example": "ETH",
                    "required": true
                  }
                ]
              },
              {
                "name": "usdPrice",
                "type": "number",
                "description": "The price in USD for the token",
                "example": "19.722370676"
              },
              {
                "name": "exchangeAddress",
                "type": "string",
                "description": "The address of the exchange used to calculate the price",
                "example": "0x1f98431c8ad98523631ae4a59f267346ea31f984"
              },
              {
                "name": "exchangeName",
                "type": "string",
                "description": "The name of the exchange used to calculate the price",
                "example": "Uniswap v3"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.token.getTokenPrice({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetTokenPrice(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        Erc20Price resp = await web3Api.Token.GetTokenPrice(\"0x6b175474e89094c44da98b954eedeac495271d0f\", ChainList.eth);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0\", \n    \"chain\": \"eth\", \n    \"exchange\": \"\", \n    \"to_block\": 0, \n}\n\nresult = evm_api.token.get_token_price(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getWalletTokenBalances": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get ERC20 token balance by wallet",
      "description": "Get token balances for a specific wallet address.",
      "method": "GET",
      "path": "/:address/erc20",
      "pathParams": [
        {
          "name": "address",
          "description": "The address from which token balances will be checked",
          "required": true,
          "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "to_block",
          "description": "The block number from which the balances should be checked",
          "required": false,
          "type": "number"
        },
        {
          "name": "token_addresses",
          "description": "The addresses to get balances for (optional)",
          "required": false,
          "type": "array",
          "field": { "type": "string" }
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns token balances for a specific address"
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetTokenBalances(IWeb3Api web3Api, string address)\n{\n    bool result = true;\n    try\n    {\n        List<Erc20TokenBalance> balance = await web3Api.Account.GetTokenBalances(address.ToLower(), ChainList.eth);\n        result = balance is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n    return result;\n}\n",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\", \n    \"chain\": \"eth\", \n    \"to_block\": 1.2, \n    \"token_addresses\": [], \n}\n\nresult = evm_api.token.get_wallet_token_balances(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getWalletTokenTransfers": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get ERC20 token transactions by wallet",
      "description": "Get ERC20 token transactions ordered by block number in descending order.",
      "method": "GET",
      "path": "/:address/erc20/transfers",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the wallet",
          "required": true,
          "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the transactions\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from which to get the transactions.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "from_date",
          "description": "The start date from which to get the transactions (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get the transactions up to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of token transactions.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09"
                  },
                  {
                    "name": "address",
                    "type": "string",
                    "description": "The address of the token",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-04-02T10:07:54.000Z"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number",
                    "example": 12526958
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash",
                    "example": "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The recipient",
                    "example": "0x62AED87d21Ad0F3cdE4D147Fdcc9245401Af0044"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The sender",
                    "example": "0xd4a3BebD824189481FC45363602b83C9c7e9cbDf"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value that was transferred (in wei)",
                    "example": 650000000000000000
                  },
                  {
                    "name": "transaction_index",
                    "type": "number",
                    "description": "The transaction index of the transfer within the block",
                    "example": 12
                  },
                  {
                    "name": "log_index",
                    "type": "number",
                    "description": "The log index of the transfer within the block",
                    "example": 2
                  }
                ]
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.token.getWalletTokenTransfers({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetTokenTransfers(IWeb3Api web3Api, string address)\n{\n    bool result = true;\n    try\n    {\n        Erc20TransactionCollection balance = await web3Api.Account.GetTokenTransfers(address.ToLower(), ChainList.eth);\n        result = balance is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n    return result;\n}\n",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\", \n    \"chain\": \"eth\", \n    \"from_block\": 0, \n    \"to_block\": 0, \n    \"from_date\": \"\", \n    \"to_date\": \"\", \n    \"limit\": 0, \n    \"cursor\": \"\", \n}\n\nresult = evm_api.token.get_wallet_token_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getTokenMetadata": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get ERC20 token metadata by contract",
      "description": "Get the metadata for a given token contract address (name, symbol, decimals, logo).",
      "method": "GET",
      "path": "/erc20/metadata",
      "pathParams": [],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "addresses",
          "description": "The addresses to get metadata for",
          "required": true,
          "type": "array",
          "field": { "type": "string" }
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Get the metadata for a given ERC20 token contract address (name, symbol, decimals, logo)."
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const addresses = ['0x1234567890123456789012345678901234567890'];\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.token.getTokenMetadata({\n        addresses,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetTokenMetadata(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        List<string> addresses = new List<string>();\n        addresses.Add(\"0x6b175474e89094c44da98b954eedeac495271d0f\");\n        List<Erc20Metadata> resp = await web3Api.Token.GetTokenMetadata(addresses, ChainList.eth);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"addresses\": [], \n    \"chain\": \"eth\", \n}\n\nresult = evm_api.token.get_token_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getTokenMetadataBySymbol": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get ERC20 token metadata by symbols",
      "description": "Get the metadata for a list of token symbols (name, symbol, decimals, logo).",
      "method": "GET",
      "path": "/erc20/metadata/symbols",
      "pathParams": [],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "symbols",
          "description": "The symbols to get metadata for",
          "required": true,
          "type": "array",
          "field": { "type": "string", "example": "LINK" }
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns metadata for a given token contract address (name, symbol, decimals, logo)."
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const symbols = ['UNI', 'AAVE', 'LINK'];\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.token.getTokenMetadataBySymbol({\n        symbols,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetTokenMetadataBySymbol (IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        List<string> symbols = new List<string>();\n        symbols.Add(\"DAI\");\n        List<Erc20Metadata> resp = await web3Api.Token.GetTokenMetadataBySymbol(symbols, ChainList.eth);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"symbols\": [], \n    \"chain\": \"eth\", \n}\n\nresult = evm_api.token.get_token_metadata_by_symbol(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getTokenAllowance": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get ERC20 token allowance",
      "description": "Get the amount which the spender is allowed to withdraw on behalf of the owner.",
      "method": "GET",
      "path": "/erc20/:address/allowance",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the token contract",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "owner_address",
          "description": "The address of the token owner",
          "required": true,
          "type": "string"
        },
        {
          "name": "spender_address",
          "description": "The address of the token spender",
          "required": true,
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the amount which the spender is allowed to withdraw on behalf of the owner.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "allowance",
                "type": "string",
                "description": "The allowance"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.token.getTokenAllowance({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetTokenAllowance(IWeb3Api web3Api)\n{\n    bool result = true;\n    try\n    {\n        Erc20Allowance resp = await web3Api.Token.GetTokenAllowance(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", ChainList.eth);\n        result = resp is { };\n    }\n    catch (Exception exp) { result = false; }\n    return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"\", \n    \"owner_address\": \"\", \n    \"spender_address\": \"\", \n    \"chain\": \"eth\", \n}\n\nresult = evm_api.token.get_token_allowance(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getTokenTransfers": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get ERC20 token transactions by contract",
      "description": "Get ERC20 token transactions from a contract ordered by block number in descending order.",
      "method": "GET",
      "path": "/erc20/:address/transfers",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the token contract",
          "required": true,
          "example": "0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from which to get the transfers.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "from_date",
          "description": "The start date from which to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get the transfers up to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "type": "string"
        },
        {
          "name": "offset",
          "description": "offset",
          "required": false,
          "type": "number"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of token contract transactions.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09"
                  },
                  {
                    "name": "address",
                    "type": "string",
                    "description": "The address of the token",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-04-02T10:07:54.000Z"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number",
                    "example": 12526958
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash",
                    "example": "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The recipient",
                    "example": "0x62AED87d21Ad0F3cdE4D147Fdcc9245401Af0044"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The sender",
                    "example": "0xd4a3BebD824189481FC45363602b83C9c7e9cbDf"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value that was transferred (in wei)",
                    "example": 650000000000000000
                  },
                  {
                    "name": "transaction_index",
                    "type": "number",
                    "description": "The transaction index of the transfer within the block",
                    "example": 12
                  },
                  {
                    "name": "log_index",
                    "type": "number",
                    "description": "The log index of the transfer within the block",
                    "example": 2
                  }
                ]
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.token.getTokenTransfers({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetTokenAdressTransfers(IWeb3Api web3Api)\n{\n    bool result = true;\n    try\n    {\n        Erc20TransactionCollection resp = await web3Api.Token.GetTokenAddressTransfers(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", ChainList.eth, null, null, null, null, null, 0, 10);\n        result = resp is { };\n    }\n    catch (Exception exp) { result = false; }\n   return result;\n} \n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0\", \n    \"chain\": \"eth\", \n    \"from_block\": 0, \n    \"to_block\": 0, \n    \"from_date\": \"\", \n    \"to_date\": \"\", \n    \"offset\": 0, \n    \"limit\": 0, \n}\n\nresult = evm_api.token.get_token_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    }
  },
  "balance": {
    "getNativeBalance": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get native balance by wallet",
      "description": "Get the native balance for a specific wallet address.",
      "method": "GET",
      "path": "/:address/balance",
      "pathParams": [
        {
          "name": "address",
          "description": "The address from which the native balance will be checked",
          "required": true,
          "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "to_block",
          "description": "The block number from which the balances should be checked",
          "required": false,
          "type": "number"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the native balance for a specific address",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "balance",
                "type": "string",
                "description": "The balance",
                "example": "1234567890"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.balance.getNativeBalance({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetNativeBalance(IWeb3Api web3Api, string address)\n{\n    bool result = true;\n    try\n    {\n        NativeBalance balance = await web3Api.Account.GetNativeBalance(address.ToLower(), ChainList.eth);\n        result = balance is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n    return result;\n}\n",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e\", \n    \"chain\": \"eth\", \n    \"to_block\": 1.2, \n}\n\nresult = evm_api.balance.get_native_balance(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    }
  },
  "transaction": {
    "getWalletTransactions": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get native transactions by wallet",
      "description": "Get native transactions ordered by block number in descending order.",
      "method": "GET",
      "path": "/:address",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the wallet",
          "required": true,
          "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the transactions\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from which to get the transactions.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "from_date",
          "description": "The start date from which to get the transactions (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get the transactions up to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "type": "string"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of native transactions.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "2000"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "hash",
                    "type": "string",
                    "description": "The hash of the transaction",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "nonce",
                    "type": "string",
                    "description": "The nonce of the transaction",
                    "example": 326595425
                  },
                  {
                    "name": "transaction_index",
                    "type": "string",
                    "description": "The transaction index",
                    "example": 25
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The sender",
                    "example": "0xd4a3BebD824189481FC45363602b83C9c7e9cbDf"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The recipient",
                    "example": "0xa71db868318f0a0bae9411347cd4a6fa23d8d4ef"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value that was transferred (in wei)",
                    "example": 650000000000000000
                  },
                  {
                    "name": "gas",
                    "type": "string",
                    "description": "The gas of the transaction",
                    "example": 6721975
                  },
                  {
                    "name": "gas_price",
                    "type": "string",
                    "description": "The gas price",
                    "example": 20000000000
                  },
                  {
                    "name": "input",
                    "type": "string",
                    "description": "The input"
                  },
                  {
                    "name": "receipt_cumulative_gas_used",
                    "type": "string",
                    "description": "The receipt cumulative gas used",
                    "example": 1340925
                  },
                  {
                    "name": "receipt_gas_used",
                    "type": "string",
                    "description": "The receipt gas used",
                    "example": 1340925
                  },
                  {
                    "name": "receipt_contract_address",
                    "type": "string",
                    "description": "The receipt contract address",
                    "example": "0x1d6a4cf64b52f6c73f201839aded7379ce58059c"
                  },
                  {
                    "name": "receipt_root",
                    "type": "string",
                    "description": "The receipt root"
                  },
                  {
                    "name": "receipt_status",
                    "type": "string",
                    "description": "The receipt status",
                    "example": 1
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-04-02T10:07:54.000Z"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number",
                    "example": 12526958
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash",
                    "example": "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
                  }
                ]
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.transaction.getWalletTransactions({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetTransactions(IWeb3Api web3Api, string address)\n{\n    bool result = true;\n    try\n    {\n        TransactionCollection balance = await web3Api.Account.GetTransactions(address.ToLower(), ChainList.eth);\n        result = balance is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n    return result;\n}\n",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\", \n    \"chain\": \"eth\", \n    \"from_block\": 0, \n    \"to_block\": 0, \n    \"from_date\": \"\", \n    \"to_date\": \"\", \n    \"cursor\": \"\", \n    \"limit\": 0, \n}\n\nresult = evm_api.transaction.get_wallet_transactions(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getWalletTransactionsVerbose": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get verbose transactions by wallet",
      "description": "Get native transactions and logs ordered by block number in descending order.",
      "method": "GET",
      "path": "/:address/verbose",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the wallet",
          "required": true,
          "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the transactions\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from which to get the transactions.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "from_date",
          "description": "The start date from which to get the transactions (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get the transactions up to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "type": "string"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of native transactions.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "2"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "hash",
                    "type": "string",
                    "description": "The hash of the transaction",
                    "example": "0x1ed85b3757a6d31d01a4d6677fc52fd3911d649a0af21fe5ca3f886b153773ed"
                  },
                  {
                    "name": "nonce",
                    "type": "string",
                    "description": "The nonce",
                    "example": "1848059"
                  },
                  {
                    "name": "transaction_index",
                    "type": "string",
                    "example": "108"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The from address",
                    "example": "0x267be1c1d684f78cb4f6a176c4911b741e4ffdc0"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The to address",
                    "example": "0x003dde3494f30d861d063232c6a8c04394b686ff"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value sent",
                    "example": "115580000000000000"
                  },
                  { "name": "gas", "type": "string", "example": "30000" },
                  {
                    "name": "gas_price",
                    "type": "string",
                    "description": "The gas price",
                    "example": "52500000000"
                  },
                  { "name": "input", "type": "string", "example": "0x" },
                  {
                    "name": "receipt_cumulative_gas_used",
                    "type": "string",
                    "example": "4923073"
                  },
                  {
                    "name": "receipt_gas_used",
                    "type": "string",
                    "example": "21000"
                  },
                  {
                    "name": "receipt_contract_address",
                    "type": "string",
                    "example": null
                  },
                  { "name": "receipt_root", "type": "string", "example": null },
                  {
                    "name": "receipt_status",
                    "type": "string",
                    "example": "1"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-05-07T11:08:35.000Z"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number",
                    "example": "12386788"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The hash of the block",
                    "example": "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
                  },
                  {
                    "name": "logs",
                    "type": "object",
                    "description": "The logs of the transaction",
                    "fields": [
                      {
                        "name": "log_index",
                        "type": "string",
                        "example": "273"
                      },
                      {
                        "name": "transaction_hash",
                        "type": "string",
                        "description": "The hash of the transaction",
                        "example": "0xdd9006489e46670e0e85d1fb88823099e7f596b08aeaac023e9da0851f26fdd5"
                      },
                      {
                        "name": "transaction_index",
                        "type": "string",
                        "example": "204"
                      },
                      {
                        "name": "address",
                        "type": "string",
                        "description": "The address of the contract",
                        "example": "0x3105d328c66d8d55092358cf595d54608178e9b5"
                      },
                      {
                        "name": "data",
                        "type": "string",
                        "description": "The data of the log",
                        "example": "0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443"
                      },
                      {
                        "name": "topic0",
                        "type": "string",
                        "example": "0x2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a"
                      },
                      {
                        "name": "topic1",
                        "type": "string",
                        "example": "0x000000000000000000000000031002d15b0d0cd7c9129d6f644446368deae391"
                      },
                      {
                        "name": "topic2",
                        "type": "string",
                        "example": "0x000000000000000000000000d25943be09f968ba740e0782a34e710100defae9"
                      },
                      { "name": "topic3", "type": "string", "example": null },
                      {
                        "name": "block_timestamp",
                        "type": "string",
                        "description": "The timestamp of the block",
                        "example": "2021-05-07T11:08:35.000Z"
                      },
                      {
                        "name": "block_number",
                        "type": "string",
                        "description": "The block number",
                        "example": "12386788"
                      },
                      {
                        "name": "block_hash",
                        "type": "string",
                        "description": "The hash of the block",
                        "example": "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0xd8da6bf26964af9d7eed9e03e53415d37aa96045';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.transaction.getWalletTransactionsVerbose({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n          ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\", \n    \"chain\": \"eth\", \n    \"from_block\": 0, \n    \"to_block\": 0, \n    \"from_date\": \"\", \n    \"to_date\": \"\", \n    \"cursor\": \"\", \n    \"limit\": 0, \n}\n\nresult = evm_api.transaction.get_wallet_transactions_verbose(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getTransaction": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get transaction by hash",
      "description": "Get the contents of a transaction by the given transaction hash.",
      "method": "GET",
      "path": "/transaction/:transaction_hash",
      "pathParams": [
        {
          "name": "transaction_hash",
          "description": "The transaction hash",
          "required": true,
          "example": "0xdc85cb1b75fd09c2f6d001fea4aba83764193cbd7881a1fa8ccde350a5681109",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Transaction details by transaction hash",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "hash",
                "type": "string",
                "description": "The hash of the transaction",
                "example": "0x1ed85b3757a6d31d01a4d6677fc52fd3911d649a0af21fe5ca3f886b153773ed"
              },
              {
                "name": "nonce",
                "type": "string",
                "description": "The nonce",
                "example": "1848059"
              },
              {
                "name": "transaction_index",
                "type": "string",
                "example": "108"
              },
              {
                "name": "from_address",
                "type": "string",
                "description": "The from address",
                "example": "0x267be1c1d684f78cb4f6a176c4911b741e4ffdc0"
              },
              {
                "name": "to_address",
                "type": "string",
                "description": "The to address",
                "example": "0x003dde3494f30d861d063232c6a8c04394b686ff"
              },
              {
                "name": "value",
                "type": "string",
                "description": "The value sent",
                "example": "115580000000000000"
              },
              { "name": "gas", "type": "string", "example": "30000" },
              {
                "name": "gas_price",
                "type": "string",
                "description": "The gas price",
                "example": "52500000000"
              },
              { "name": "input", "type": "string", "example": "0x" },
              {
                "name": "receipt_cumulative_gas_used",
                "type": "string",
                "example": "4923073"
              },
              {
                "name": "receipt_gas_used",
                "type": "string",
                "example": "21000"
              },
              {
                "name": "receipt_contract_address",
                "type": "string",
                "example": null
              },
              { "name": "receipt_root", "type": "string", "example": null },
              { "name": "receipt_status", "type": "string", "example": "1" },
              {
                "name": "block_timestamp",
                "type": "string",
                "description": "The block timestamp",
                "example": "2021-05-07T11:08:35.000Z"
              },
              {
                "name": "block_number",
                "type": "string",
                "description": "The block number",
                "example": "12386788"
              },
              {
                "name": "block_hash",
                "type": "string",
                "description": "The hash of the block",
                "example": "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
              },
              {
                "name": "logs",
                "type": "object",
                "description": "The logs of the transaction",
                "fields": [
                  { "name": "log_index", "type": "string", "example": "273" },
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The hash of the transaction",
                    "example": "0xdd9006489e46670e0e85d1fb88823099e7f596b08aeaac023e9da0851f26fdd5"
                  },
                  {
                    "name": "transaction_index",
                    "type": "string",
                    "example": "204"
                  },
                  {
                    "name": "address",
                    "type": "string",
                    "description": "The address of the contract",
                    "example": "0x3105d328c66d8d55092358cf595d54608178e9b5"
                  },
                  {
                    "name": "data",
                    "type": "string",
                    "description": "The data of the log",
                    "example": "0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443"
                  },
                  {
                    "name": "topic0",
                    "type": "string",
                    "example": "0x2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a"
                  },
                  {
                    "name": "topic1",
                    "type": "string",
                    "example": "0x000000000000000000000000031002d15b0d0cd7c9129d6f644446368deae391"
                  },
                  {
                    "name": "topic2",
                    "type": "string",
                    "example": "0x000000000000000000000000d25943be09f968ba740e0782a34e710100defae9"
                  },
                  { "name": "topic3", "type": "string", "example": null },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The timestamp of the block",
                    "example": "2021-05-07T11:08:35.000Z"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number",
                    "example": "12386788"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The hash of the block",
                    "example": "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
                  }
                ]
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.transaction.getTransaction({\n        transactionHash,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetTransaction(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        BlockTransaction blockTransaction = await web3Api.Native.GetTransaction(\"0xdc85cb1b75fd09c2f6d001fea4aba83764193cbd7881a1fa8ccde350a5681109\", ChainList.eth);\n         result = blockTransaction is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"transaction_hash\": \"0xdc85cb1b75fd09c2f6d001fea4aba83764193cbd7881a1fa8ccde350a5681109\", \n    \"chain\": \"eth\", \n}\n\nresult = evm_api.transaction.get_transaction(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    }
  },
  "events": {
    "getContractLogs": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get logs by contract",
      "description": "Get the logs for a contract.",
      "method": "GET",
      "path": "/:address/logs",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the contract",
          "required": true,
          "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "block_number",
          "description": "The block number\n* Provide the param 'block_numer' or ('from_block' and / or 'to_block')\n* If 'block_numer' is provided in combination with 'from_block' and / or 'to_block', 'block_number' will will be used\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the logs\n* Provide the param 'block_numer' or ('from_block' and / or 'to_block')\n* If 'block_numer' is provided in combination with 'from_block' and / or 'to_block', 'block_number' will will be used\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from which to get the logs\n* Provide the param 'block_numer' or ('from_block' and / or 'to_block')\n* If 'block_numer' is provided in combination with 'from_block' and / or 'to_block', 'block_number' will will be used\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "from_date",
          "description": "The start date from which to get the logs (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n* If 'from_date' and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get the logs up to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n* If 'to_date' and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "topic0",
          "description": "topic0",
          "required": false,
          "type": "string"
        },
        {
          "name": "topic1",
          "description": "topic1",
          "required": false,
          "type": "string"
        },
        {
          "name": "topic2",
          "description": "topic2",
          "required": false,
          "type": "string"
        },
        {
          "name": "topic3",
          "description": "topic3",
          "required": false,
          "type": "string"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        },
        {
          "name": "cursor",
          "description": "The cursor returned in the previous response (used for getting the next page).",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the logs for an address",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "total",
                "type": "number",
                "description": "The total number of matches for this query",
                "example": "100"
              },
              {
                "name": "page",
                "type": "number",
                "description": "The current page of the result",
                "example": "1"
              },
              {
                "name": "page_size",
                "type": "number",
                "description": "The number of results per page",
                "example": "100"
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "The cursor to get to the next page"
              },
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "transaction_hash",
                    "type": "string",
                    "description": "The transaction hash",
                    "example": "0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09"
                  },
                  {
                    "name": "address",
                    "type": "string",
                    "description": "The address of the contract",
                    "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-04-02T10:07:54.000Z"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number",
                    "example": 12526958
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The block hash",
                    "example": "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
                  },
                  {
                    "name": "data",
                    "type": "string",
                    "description": "The data of the log",
                    "example": "0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443"
                  },
                  {
                    "name": "topic0",
                    "type": "string",
                    "example": "0x2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a"
                  },
                  {
                    "name": "topic1",
                    "type": "string",
                    "example": "0x000000000000000000000000031002d15b0d0cd7c9129d6f644446368deae391"
                  },
                  {
                    "name": "topic2",
                    "type": "string",
                    "example": "0x000000000000000000000000d25943be09f968ba740e0782a34e710100defae9"
                  },
                  { "name": "topic3", "type": "string", "example": null },
                  {
                    "name": "transaction_index",
                    "type": "number",
                    "description": "The Transaction index of the log within the block",
                    "example": 12
                  },
                  {
                    "name": "log_index",
                    "type": "number",
                    "description": "The log index of the log within the block",
                    "example": 15
                  }
                ]
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.events.getContractLogs({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetLogsByAddress(IWeb3Api web3Api, string address)\n{\n    bool result = true;\n     try\n    {\n        LogEventByAddress logEvents = await web3Api.Native.GetLogsByAddress(address, ChainList.eth);\n         result = logEvents is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0\", \n    \"chain\": \"eth\", \n    \"block_number\": \"\", \n    \"from_block\": \"\", \n    \"to_block\": \"\", \n    \"from_date\": \"\", \n    \"to_date\": \"\", \n    \"topic0\": \"\", \n    \"topic1\": \"\", \n    \"topic2\": \"\", \n    \"topic3\": \"\", \n    \"limit\": 0, \n    \"cursor\": \"\", \n}\n\nresult = evm_api.events.get_contract_logs(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getContractEvents": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get events by contract",
      "description": "Get events for a contract ordered by block number in descending order.",
      "method": "POST",
      "path": "/:address/events",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the contract",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "from_block",
          "description": "The minimum block number from which to get the logs\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "to_block",
          "description": "The maximum block number from which to get the logs.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "required": false,
          "type": "number"
        },
        {
          "name": "from_date",
          "description": "The start date from which to get the logs (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get the logs up to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "type": "string"
        },
        {
          "name": "topic",
          "description": "The topic of the event",
          "required": true,
          "type": "string"
        },
        {
          "name": "offset",
          "description": "offset",
          "required": false,
          "type": "number"
        },
        {
          "name": "disable_total",
          "description": "If the result should skip returning the total count (Improves performance).",
          "required": false,
          "type": "boolean"
        },
        {
          "name": "limit",
          "description": "The desired page size of the result.",
          "required": false,
          "type": "number"
        }
      ],
      "bodyParam": {
        "required": false,
        "description": "ABI of the specific event",
        "type": "json"
      },
      "responses": [
        {
          "status": "200",
          "description": "Returns a collection of events by topic"
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const abi = []; // Add ABI\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.events.getContractEvents({\n        address,\n        chain,\n        abi,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetContractEvents(IWeb3Api web3Api)\n{\n    bool result = true;\n    try\n    {\n        // Function ABI input parameters\n        object[] inputParams = new object[3];\n        inputParams[0] = new { indexed = true, internalType = \"bytes32\", name = \"role\", type = \"bytes32\" };\n        inputParams[1] = new { indexed = true, internalType = \"address\", name = \"account\", type = \"address\" };\n        inputParams[2] = new { indexed = true, internalType = \"address\", name = \"sender\", type = \"address\" };\n        // Function ABI\n        object abi = new { anonymous = false, inputs = inputParams, name = \"RoleGranted\", type = \"event\" };\n        List<LogEvent> logEvents = await web3Api.Native.GetContractEvents(\"0x698d7D745B7F5d8EF4fdB59CeB660050b3599AC3\", \n            \"0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d\", \n            //\"bob\",\n            abi, ChainList.mumbai);\n        result = logEvents is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n    return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"\", \n    \"topic\": \"\", \n    \"chain\": \"eth\", \n    \"from_block\": 0, \n    \"to_block\": 0, \n    \"from_date\": \"\", \n    \"to_date\": \"\", \n    \"offset\": 0, \n    \"limit\": 0, \n}\nbody = \"\"\n\nresult = evm_api.events.get_contract_events(\n    api_key=api_key,\n    params=params,\n    body=body,\n)\n\nprint(result)\n"
        }
      ]
    }
  },
  "block": {
    "getBlock": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get block by hash",
      "description": "Get the contents of a block given the block hash.",
      "method": "GET",
      "path": "/block/:block_number_or_hash",
      "pathParams": [
        {
          "name": "block_number_or_hash",
          "description": "The block number or block hash",
          "required": true,
          "example": "15863321",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the contents of a block",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "timestamp",
                "type": "string",
                "description": "The block timestamp",
                "example": "2021-05-07T11:08:35.000Z"
              },
              {
                "name": "number",
                "type": "string",
                "description": "The block number",
                "example": 12386788
              },
              {
                "name": "hash",
                "type": "string",
                "description": "The block hash",
                "example": "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
              },
              {
                "name": "parent_hash",
                "type": "string",
                "description": "The block hash of the parent block",
                "example": "0x011d1fc45839de975cc55d758943f9f1d204f80a90eb631f3bf064b80d53e045"
              },
              {
                "name": "nonce",
                "type": "string",
                "description": "The nonce",
                "example": "0xedeb2d8fd2b2bdec"
              },
              {
                "name": "sha3_uncles",
                "type": "string",
                "example": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347"
              },
              {
                "name": "logs_bloom",
                "type": "string",
                "example": "0xdde5fc46c5d8bcbd58207bc9f267bf43298e23791a326ff02661e99790da9996b3e0dd912c0b8202d389d282c56e4d11eb2dec4898a32b6b165f1f4cae6aa0079498eab50293f3b8defbf6af11bb75f0408a563ddfc26a3323d1ff5f9849e95d5f034d88a757ddea032c75c00708c9ff34d2207f997cc7d93fd1fa160a6bfaf62a54e31f9fe67ab95752106ba9d185bfdc9b6dc3e17427f844ee74e5c09b17b83ad6e8fc7360f5c7c3e4e1939e77a6374bee57d1fa6b2322b11ad56ad0398302de9b26d6fbfe414aa416bff141fad9d4af6aea19322e47595e342cd377403f417dfd396ab5f151095a5535f51cbc34a40ce9648927b7d1d72ab9daf253e31daf"
              },
              {
                "name": "transactions_root",
                "type": "string",
                "example": "0xe4c7bf3aff7ad07f9e80d57f7189f0252592fee6321c2a9bd9b09b6ce0690d27"
              },
              {
                "name": "state_root",
                "type": "string",
                "example": "0x49e3bfe7b618e27fde8fa08884803a8458b502c6534af69873a3cc926a7c724b"
              },
              {
                "name": "receipts_root",
                "type": "string",
                "example": "0x7cf43d7e837284f036cf92c56973f5e27bdd253ca46168fa195a6b07fa719f23"
              },
              {
                "name": "miner",
                "type": "string",
                "description": "The address of the miner",
                "example": "0xea674fdde714fd979de3edf0f56aa9716b898ec8"
              },
              {
                "name": "difficulty",
                "type": "string",
                "description": "The difficulty of the block",
                "example": "7253857437305950"
              },
              {
                "name": "total_difficulty",
                "type": "string",
                "description": "The total difficulty",
                "example": "24325637817906576196890"
              },
              {
                "name": "size",
                "type": "string",
                "description": "The block size",
                "example": "61271"
              },
              {
                "name": "extra_data",
                "type": "string",
                "example": "0x65746865726d696e652d6575726f70652d7765737433"
              },
              {
                "name": "gas_limit",
                "type": "string",
                "description": "The gas limit",
                "example": "14977947"
              },
              {
                "name": "gas_used",
                "type": "string",
                "description": "The gas used",
                "example": "14964688"
              },
              {
                "name": "transaction_count",
                "type": "string",
                "description": "The number of transactions in the block",
                "example": "252"
              },
              {
                "name": "transactions",
                "type": "object",
                "description": "The transactions in the block",
                "fields": [
                  {
                    "name": "hash",
                    "type": "string",
                    "description": "The hash of the transaction",
                    "example": "0x1ed85b3757a6d31d01a4d6677fc52fd3911d649a0af21fe5ca3f886b153773ed"
                  },
                  {
                    "name": "nonce",
                    "type": "string",
                    "description": "The nonce",
                    "example": "1848059"
                  },
                  {
                    "name": "transaction_index",
                    "type": "string",
                    "example": "108"
                  },
                  {
                    "name": "from_address",
                    "type": "string",
                    "description": "The from address",
                    "example": "0x267be1c1d684f78cb4f6a176c4911b741e4ffdc0"
                  },
                  {
                    "name": "to_address",
                    "type": "string",
                    "description": "The to address",
                    "example": "0x003dde3494f30d861d063232c6a8c04394b686ff"
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "description": "The value sent",
                    "example": "115580000000000000"
                  },
                  { "name": "gas", "type": "string", "example": "30000" },
                  {
                    "name": "gas_price",
                    "type": "string",
                    "description": "The gas price",
                    "example": "52500000000"
                  },
                  { "name": "input", "type": "string", "example": "0x" },
                  {
                    "name": "receipt_cumulative_gas_used",
                    "type": "string",
                    "example": "4923073"
                  },
                  {
                    "name": "receipt_gas_used",
                    "type": "string",
                    "example": "21000"
                  },
                  {
                    "name": "receipt_contract_address",
                    "type": "string",
                    "example": null
                  },
                  { "name": "receipt_root", "type": "string", "example": null },
                  {
                    "name": "receipt_status",
                    "type": "string",
                    "example": "1"
                  },
                  {
                    "name": "block_timestamp",
                    "type": "string",
                    "description": "The block timestamp",
                    "example": "2021-05-07T11:08:35.000Z"
                  },
                  {
                    "name": "block_number",
                    "type": "string",
                    "description": "The block number",
                    "example": "12386788"
                  },
                  {
                    "name": "block_hash",
                    "type": "string",
                    "description": "The hash of the block",
                    "example": "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
                  },
                  {
                    "name": "logs",
                    "type": "object",
                    "description": "The logs of the transaction",
                    "fields": [
                      {
                        "name": "log_index",
                        "type": "string",
                        "example": "273"
                      },
                      {
                        "name": "transaction_hash",
                        "type": "string",
                        "description": "The hash of the transaction",
                        "example": "0xdd9006489e46670e0e85d1fb88823099e7f596b08aeaac023e9da0851f26fdd5"
                      },
                      {
                        "name": "transaction_index",
                        "type": "string",
                        "example": "204"
                      },
                      {
                        "name": "address",
                        "type": "string",
                        "description": "The address of the contract",
                        "example": "0x3105d328c66d8d55092358cf595d54608178e9b5"
                      },
                      {
                        "name": "data",
                        "type": "string",
                        "description": "The data of the log",
                        "example": "0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443"
                      },
                      {
                        "name": "topic0",
                        "type": "string",
                        "example": "0x2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a"
                      },
                      {
                        "name": "topic1",
                        "type": "string",
                        "example": "0x000000000000000000000000031002d15b0d0cd7c9129d6f644446368deae391"
                      },
                      {
                        "name": "topic2",
                        "type": "string",
                        "example": "0x000000000000000000000000d25943be09f968ba740e0782a34e710100defae9"
                      },
                      { "name": "topic3", "type": "string", "example": null },
                      {
                        "name": "block_timestamp",
                        "type": "string",
                        "description": "The timestamp of the block",
                        "example": "2021-05-07T11:08:35.000Z"
                      },
                      {
                        "name": "block_number",
                        "type": "string",
                        "description": "The block number",
                        "example": "12386788"
                      },
                      {
                        "name": "block_hash",
                        "type": "string",
                        "description": "The hash of the block",
                        "example": "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.block.getBlock({\n        chain,\n        blockNumberOrHash,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetBlock(IWeb3Api web3Api)\n{\n    bool result = true;\n    try\n    {\n        Block block = await web3Api.Native.GetBlock(\"500000\", ChainList.eth);\n        result = block is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n    return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"block_number_or_hash\": \"15863321\", \n    \"chain\": \"eth\", \n}\n\nresult = evm_api.block.get_block(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getDateToBlock": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get block by date",
      "description": "Get the closest block given the date.",
      "method": "GET",
      "path": "/dateToBlock",
      "pathParams": [],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "date",
          "description": "Unix date in milliseconds or a datestring (any format that is accepted by momentjs)",
          "required": true,
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the block number and corresponding date and timestamp",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "date",
                "type": "string",
                "description": "The date of the block",
                "example": "2020-01-01T00:00:00+00:00"
              },
              {
                "name": "block",
                "type": "number",
                "description": "The block number",
                "example": 9193266
              },
              {
                "name": "timestamp",
                "type": "number",
                "description": "The timestamp of the block",
                "example": 1577836811
              },
              {
                "name": "block_timestamp",
                "type": "number",
                "description": "The timestamp of the block",
                "example": "2022-01-03T22:59:39.000Z"
              },
              {
                "name": "hash",
                "type": "string",
                "description": "The block hash",
                "example": "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
              },
              {
                "name": "parent_hash",
                "type": "string",
                "description": "The block hash of the parent block",
                "example": "0x011d1fc45839de975cc55d758943f9f1d204f80a90eb631f3bf064b80d53e045"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    // unix date\n    cons date = '123..'\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.block.getDateToBlock({\n        date,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetDateToBlock(IWeb3Api web3Api)\n{\n    bool result = true;\n    try\n    {\n        long unixTicks = ConvertDatetimeToUnixTimeStamp(DateTime.Now.AddDays(-1));\n    // Fails due to schema def:\n    // date * number\n    //            example: 2020 - 01 - 01T00: 00:00 + 00:00\n    //The date of the block\n        BlockDate blockDate = await web3Api.Native.GetDateToBlock(unixTicks.ToString(), ChainList.eth);\n        result = blockDate is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n    return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"date\": \"\", \n    \"chain\": \"eth\", \n}\n\nresult = evm_api.block.get_date_to_block(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    }
  },
  "utils": {
    "runContractFunction": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Run contract function",
      "description": "Run a given function of a contract ABI and retrieve readonly data.",
      "method": "POST",
      "path": "/:address/function",
      "pathParams": [
        {
          "name": "address",
          "description": "The address of the contract",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "function_name",
          "description": "The function name of the contract",
          "required": true,
          "type": "string"
        }
      ],
      "bodyParam": {
        "required": true,
        "description": "Body",
        "type": "object",
        "fields": [
          {
            "name": "abi",
            "type": "json",
            "description": "The contract ABI",
            "example": []
          },
          {
            "name": "params",
            "type": "json",
            "description": "The params for the given function",
            "example": {}
          }
        ]
      },
      "responses": [
        {
          "status": "200",
          "description": "Returns response of the function executed"
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n const abi = []; // Add ABI\n\n const functionName = 'balanceOf';\n\n const address = '0x1234567890123456789012345678901234567890';\n\n const chain = EvmChain.ETHEREUM;\n\n await Moralis.start({\n   apiKey: 'YOUR_API_KEY',\n   // ...and any other configuration\n });\n\n const response = await Moralis.EvmApi.utils.runContractFunction({\n   abi,\n   functionName,\n   address,\n   chain,\n  });\n\n console.log(response?.result);\n} catch (e) {\n console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> RunContractFunction(IWeb3Api web3Api)\n{\n    bool result = true;\n    try\n    {\n        // Function ABI input parameters\n        object[] inputParams = new object[1];\n        inputParams[0] = new { internalType = \"uint256\", name = \"id\", type = \"uint256\" };\n        \n        // Function ABI Output parameters\n        object[] outputParams = new object[5];\n        outputParams[0] = new { internalType = \"uint256\", name = \"offerId\", type = \"uint256\" };\n        outputParams[1] = new { internalType = \"uint256\", name = \"id\", type = \"uint256\" };\n        outputParams[2] = new { internalType = \"address\", name = \"user\", type = \"address\" };\n        outputParams[3] = new { internalType = \"uint256\", name = \"price\", type = \"uint256\" };\n        outputParams[4] = new { internalType = \"bool\", name = \"fulfilled\", type = \"bool\" };\n        // Function ABI\n        object[] abi = new object[1];\n        abi[0] = new { inputs = inputParams, name = \"offers\", outputs = outputParams, stateMutability = \"view\", type = \"function\" };\n        // Define request object\n        RunContractDto rcd = new RunContractDto()\n        {\n            Abi = abi,\n            Params = new { id=\"1\" }\n        };\n        bob resp = await web3Api.Native.RunContractFunction<bob>(\"0x383cAe6B39ad82305242EFcfDa6EC5B2a52B4620\", \"offers\", rcd, ChainList.mumbai);\n        result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n    return result;\n}\n",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"\", \n    \"function_name\": \"\", \n    \"chain\": \"eth\", \n}\nbody = {\n    \"abi\": [], \n    \"params\": {}, \n}\n\nresult = evm_api.utils.run_contract_function(\n    api_key=api_key,\n    params=params,\n    body=body,\n)\n\nprint(result)\n"
        }
      ]
    },
    "web3ApiVersion": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get API version",
      "description": "Get the current version of the Moralis Web3 API.",
      "method": "GET",
      "path": "/web3/version",
      "pathParams": [],
      "queryParams": [],
      "responses": [
        {
          "status": "200",
          "description": "Get the current version of the Moralis Web3 API.",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "version",
                "type": "string",
                "description": "The version of the API",
                "example": "1.0.0"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\n\ntry {\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.utils.web3ApiVersion();\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetWeb3ApiVersion(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        VersionResponse version = await web3Api.Info.GetWeb3ApiVersion();\n         result = version is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nresult = evm_api.utils.web3_api_version(\n    api_key=api_key,\n)\n\nprint(result)\n"
        }
      ]
    },
    "endpointWeights": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get weights of endpoints",
      "description": "Get the cost and rate limit for each API endpoint.",
      "method": "GET",
      "path": "/info/endpointWeights",
      "pathParams": [],
      "queryParams": [],
      "responses": [
        {
          "status": "200",
          "description": "The cost and rate limit for each API endpoint."
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\n\n try {\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.utils.endpointWeights();\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetEndpointWeights(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        List<EndpointWeights> weights = await web3Api.Info.GetEndpointWeights();\n         result = weights is { } && weights.Count > 0;\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nresult = evm_api.utils.endpoint_weights(\n    api_key=api_key,\n)\n\nprint(result)\n"
        }
      ]
    }
  },
  "resolve": {
    "resolveAddress": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Resolve ENS domain",
      "description": "Reverse resolve a given ETH address to its ENS domain.",
      "method": "GET",
      "path": "/resolve/:address/reverse",
      "pathParams": [
        {
          "name": "address",
          "description": "The address to be resolved",
          "required": true,
          "example": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
          "type": "string"
        }
      ],
      "queryParams": [],
      "responses": [
        {
          "status": "200",
          "description": "Returns an ENS",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "name",
                "type": "string",
                "description": "Resolved ENS address",
                "example": "Vitalik.eth"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\n\ntry {\n    const address = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.resolve.resolveAddress({\n        address,\n    });\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "\nprivate async Task<bool> ResolveAddress(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        Ens resp = await web3Api.Resolve.ResolveAddress(\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\");\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\", \n}\n\nresult = evm_api.resolve.resolve_address(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "resolveDomain": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Resolve Unstoppable domain",
      "description": "Resolve a specific Unstoppable domain to its address.",
      "method": "GET",
      "path": "/resolve/:domain",
      "pathParams": [
        {
          "name": "domain",
          "description": "The domain to be resolved",
          "required": true,
          "example": "brad.crypto",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "currency",
          "description": "The currency to query",
          "required": false,
          "example": "eth",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns an address",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "address",
                "type": "string",
                "description": "Resolved domain address",
                "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
              }
            ]
          }
        },
        { "status": "404", "description": "Returns an address" }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\n\ntry {\n    const domain = 'brad.crypto';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.resolve.resolveDomain({\n        domain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> ResolveDomain(IWeb3Api web3Api)\n{\n    bool result = true;\n    try\n    {\n        Resolve resp = await web3Api.Resolve.ResolveDomain(WebUtility.UrlEncode (\"brad.crypto\") );\n        result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n    return result;\n}\n\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"domain\": \"brad.crypto\", \n    \"currency\": \"eth\", \n}\n\nresult = evm_api.resolve.resolve_domain(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    }
  },
  "defi": {
    "getPairReserves": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get DEX token pair reserves",
      "description": "Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment.",
      "method": "GET",
      "path": "/:pair_address/reserves",
      "pathParams": [
        {
          "name": "pair_address",
          "description": "The liquidity pair address",
          "required": true,
          "example": "0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "to_block",
          "description": "The block number to get the reserves from",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get the reserves up to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "type": "string"
        }
      ],
      "responses": [
        { "status": "200", "description": "Returns the pair reserves" }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    // Pair Token address\n    const pairAddress = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.defi.getPairReserves({\n        pairAddress,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetPairReserves(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        ReservesCollection balance = await web3Api.Defi.GetPairReserves(\"0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974\", ChainList.eth);\n         result = balance is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"pair_address\": \"0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974\", \n    \"chain\": \"eth\", \n    \"to_block\": \"\", \n    \"to_date\": \"\", \n}\n\nresult = evm_api.defi.get_pair_reserves(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getPairAddress": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Get DEX token pair address",
      "description": "Fetch the pair data of the provided token0+token1 combination.\nThe token0 and token1 options are interchangable (ie. there is no different outcome in \"token0=WETH and token1=USDT\" or \"token0=USDT and token1=WETH\")\n",
      "method": "GET",
      "path": "/:token0_address/:token1_address/pairAddress",
      "pathParams": [
        {
          "name": "token0_address",
          "description": "The token0 address",
          "required": true,
          "example": "0x2b591e99afe9f32eaa6214f7b7629768c40eeb39",
          "type": "string"
        },
        {
          "name": "token1_address",
          "description": "The token1 address",
          "required": true,
          "example": "0xdac17f958d2ee523a2206206994597c13d831ec7",
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "chain",
          "description": "The chain to query",
          "required": false,
          "example": "eth",
          "type": "string",
          "enum": [
            "eth",
            "0x1",
            "goerli",
            "0x5",
            "sepolia",
            "0xaa36a7",
            "polygon",
            "0x89",
            "mumbai",
            "0x13881",
            "bsc",
            "0x38",
            "bsc testnet",
            "0x61",
            "avalanche",
            "0xa86a",
            "avalanche testnet",
            "0xa869",
            "fantom",
            "0xfa",
            "palm",
            "0x2a15c308d",
            "cronos",
            "0x19",
            "cronos testnet",
            "0x152",
            "arbitrum",
            "0xa4b1"
          ]
        },
        {
          "name": "to_block",
          "description": "The block number to get the reserves from",
          "required": false,
          "type": "string"
        },
        {
          "name": "to_date",
          "description": "Get the reserves up to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
          "type": "string"
        },
        {
          "name": "exchange",
          "description": "The factory name or address of the token exchange",
          "required": true,
          "example": "uniswapv2",
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Returns the pair address of the two tokens.",
          "body": {
            "type": "object",
            "fields": [
              { "name": "token0", "type": "json" },
              { "name": "token1", "type": "json" },
              {
                "name": "pairAddress",
                "type": "string",
                "example": "0xbbb9bf440d0f686487925fef3b0a0f9aa67753f6"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const token0Address = '0x1234567890123456789012345678901234567890';\n\n    const token1Address = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.defi.getPairAddress({\n        token0Address,\n        token1Address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> GetPairAddress(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        ReservesCollection balance = await web3Api.Defi.GetPairAddress(\"uniswapv2\", \"0x2b591e99afe9f32eaa6214f7b7629768c40eeb39\", \"0xdac17f958d2ee523a2206206994597c13d831ec7\", ChainList.eth);\n         result = balance is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"exchange\": \"uniswapv2\", \n    \"token0_address\": \"0x2b591e99afe9f32eaa6214f7b7629768c40eeb39\", \n    \"token1_address\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\", \n    \"chain\": \"eth\", \n    \"to_block\": \"\", \n    \"to_date\": \"\", \n}\n\nresult = evm_api.defi.get_pair_address(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    }
  },
  "ipfs": {
    "uploadFolder": {
      "apiHost": "https://deep-index.moralis.io/api/v2",
      "summary": "Upload folder to IPFS",
      "description": "Upload multiple files to IPFS and place them in a folder directory.",
      "method": "POST",
      "path": "/ipfs/uploadFolder",
      "pathParams": [],
      "queryParams": [],
      "bodyParam": {
        "required": false,
        "description": "Array of JSON and Base64 Supported",
        "type": "array",
        "field": {
          "type": "object",
          "fields": [
            {
              "name": "path",
              "type": "string",
              "description": "Path to the file",
              "example": "moralis/logo.jpg"
            },
            {
              "name": "content",
              "type": "string",
              "description": "Base64 or JSON",
              "example": "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAApgAAAKYB3X3"
            }
          ]
        }
      },
      "responses": [
        {
          "status": "200",
          "description": "Returns the path to the uploaded files"
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis  from 'moralis';\n\ntry {\n    const abi = [\n        {\n        path: \"moralis/logo.jpg\",\n        content: \"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAApgAAAKYB3X3\",\n        },\n    ];\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.ipfs.uploadFolder({\n        abi\n    });\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "csharp",
          "code": "private async Task<bool> UploadFolder(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        IpfsFileRequest req = new IpfsFileRequest()\n        {\n            Path = \"moralis/logo.jpg\",\n            Content = \"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAApgAAAKYB3X3\"\n        };\n         List<IpfsFileRequest> reqs = new List<IpfsFileRequest>();\n        reqs.Add(req);\n        List<IpfsFile> resp = await web3Api.Storage.UploadFolder(reqs);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
          "name": "Moralis C# SDK"
        },
        {
          "language": "python",
          "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nbody = [{\n    \"path\": \"moralis/logo.jpg\", \n    \"content\": \"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAApgAAAKYB3X3\", \n}]\n\nresult = evm_api.ipfs.upload_folder(\n    api_key=api_key,\n    body=body,\n)\n\nprint(result)\n"
        }
      ]
    }
  },
  "auth": {
    "requestChallengeEvm": {
      "apiHost": "https://authapi.moralis.io",
      "summary": "Request EVM challenge",
      "method": "POST",
      "path": "/challenge/request/evm",
      "pathParams": [],
      "queryParams": [],
      "bodyParam": {
        "required": true,
        "description": "Request EVM challenge message.",
        "type": "object",
        "fields": [
          {
            "name": "domain",
            "type": "string",
            "description": "RFC 4501 dns authority that is requesting the signing.",
            "example": "defi.finance"
          },
          {
            "name": "chainId",
            "type": "string",
            "description": "EIP-155 Chain ID to which the session is bound, and the network where Contract Accounts must be resolved.",
            "example": 1
          },
          {
            "name": "address",
            "type": "string",
            "description": "Ethereum address performing the signing conformant to capitalization encoded checksum specified in EIP-55 where applicable.",
            "example": "0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B"
          },
          {
            "name": "statement",
            "type": "string",
            "description": "Human-readable ASCII assertion that the user will sign, and it must not contain `\n`.",
            "example": "Please confirm"
          },
          {
            "name": "uri",
            "type": "string",
            "description": "RFC 3986 URI referring to the resource that is the subject of the signing (as in the __subject__ of a claim).",
            "example": "https://defi.finance/"
          },
          {
            "name": "expirationTime",
            "type": "string",
            "description": "ISO 8601 datetime string that, if present, indicates when the signed authentication message is no longer valid.",
            "example": "2020-01-01T00:00:00.000Z"
          },
          {
            "name": "notBefore",
            "type": "string",
            "description": "ISO 8601 datetime string that, if present, indicates when the signed authentication message will become valid.",
            "example": "2020-01-01T00:00:00.000Z"
          },
          {
            "name": "resources",
            "type": "array",
            "description": "List of information or references to information the user wishes to have resolved as part of authentication by the relying party. They are expressed as RFC 3986 URIs separated by new lines.",
            "example": ["https://docs.moralis.io/"],
            "field": { "type": "string" }
          },
          {
            "name": "timeout",
            "type": "number",
            "description": "Time in seconds before the challenge is expired",
            "example": 15
          }
        ]
      },
      "responses": [
        {
          "status": "201",
          "description": "The back channel challenge containing the id to store on the api and the message to be signed by the user",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "id",
                "type": "string",
                "description": "17-characters Alphanumeric string Secret Challenge ID used to identify this particular request. Is should be used at the backend of the calling service to identify the completed request.",
                "example": "fRyt67D3eRss3RrXa"
              },
              {
                "name": "message",
                "type": "string",
                "description": "Message that needs to be signed by the end user",
                "example": "defi.finance wants you to sign in with your Ethereum account:\n0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B\n\nPlease confirm\n\nURI: https://defi.finance/\nVersion: 1\nChain ID: 1\nNonce: DbU1DCTmdzR4lg3wi\nIssued At: 2022-06-12T12:15:31.290Z\nExpiration Time: 2020-01-01T00:00:00.000Z\nNot Before: 2020-01-01T00:00:00.000Z\nResources:\n- https://docs.moralis.io/"
              },
              {
                "name": "profileId",
                "type": "string",
                "description": "Unique identifier with a length of 66 characters",
                "example": "0xbfbcfab169c67072ff418133124480fea02175f1402aaa497daa4fd09026b0e1"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from 'moralis';\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n  });\n\n  // Values set in the backend\n  const DOMAIN = 'defi.finance';\n  const STATEMENT = 'Please sign this message to confirm your identity.';\n  const URI = 'https://defi.finance';\n  const EXPIRATION_TIME = '2023-01-01T00:00:00.000Z';\n  const TIMEOUT = 15;\n\n  // Values provided by the user\n  const address = \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\";\n  const chain = \"0x1\";\n  const network = \"evm\";\n\n  const result = await Moralis.Auth.requestMessage({\n    address,\n    chain,\n    network,\n    domain: DOMAIN,\n    statement: STATEMENT,\n    uri: URI,\n    expirationTime: EXPIRATION_TIME,\n    timeout: TIMEOUT,\n  });\n} catch (e) {\n  console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import auth\n\napi_key = \"YOUR_API_KEY\"\nbody = {\n    \"domain\": \"defi.finance\", \n    \"chainId\": \"1\", \n    \"address\": \"0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B\", \n    \"statement\": \"Please confirm\", \n    \"uri\": \"https://defi.finance/\", \n    \"expirationTime\": \"2020-01-01T00:00:00.000Z\", \n    \"notBefore\": \"2020-01-01T00:00:00.000Z\", \n    \"resources\": ['https://docs.moralis.io/'], \n    \"timeout\": 15, \n}\n\nresult = auth.challenge.request_challenge_evm(\n    api_key=api_key,\n    body=body,\n)\n\nprint(result)\n"
        }
      ]
    },
    "verifyChallengeEvm": {
      "apiHost": "https://authapi.moralis.io",
      "summary": "Verify EVM challenge",
      "method": "POST",
      "path": "/challenge/verify/evm",
      "pathParams": [],
      "queryParams": [],
      "bodyParam": {
        "required": true,
        "description": "Verify EVM challenge message.",
        "type": "object",
        "fields": [
          {
            "name": "message",
            "type": "string",
            "description": "Message that needs to be signed by the end user.",
            "example": "defi.finance wants you to sign in with your Ethereum account:\n0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B\n\n\nURI: https://defi.finance\nVersion: 1\nChain ID: 1\nNonce: Px7Nh1RPzlCLwqgOb\nIssued At: 2022-11-30T10:20:00.262Z"
          },
          {
            "name": "signature",
            "type": "string",
            "description": "EIP-191 compliant signature signed by the Ethereum account address requesting authentication.",
            "example": "0xa8f89a58bf9b433d3100f9e41ee35b5e31fb8c7cd62547acb113162ec6f2e4140207e2dfbd4e387e1801ebc7f08a9dd105ac1d22b2e2ff0df5fa8b6d9bdcfe491c"
          }
        ]
      },
      "responses": [
        {
          "status": "201",
          "description": "The token to be used to call the third party API from the client",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "id",
                "type": "string",
                "description": "17-characters Alphanumeric string Secret Challenge ID used to identify this particular request. Is should be used at the backend of the calling service to identify the completed request.",
                "example": "fRyt67D3eRss3RrX"
              },
              {
                "name": "domain",
                "type": "string",
                "description": "RFC 4501 dns authority that is requesting the signing.",
                "example": "defi.finance"
              },
              {
                "name": "chainId",
                "type": "string",
                "description": "EIP-155 Chain ID to which the session is bound, and the network where Contract Accounts must be resolved.",
                "example": 1
              },
              {
                "name": "address",
                "type": "string",
                "description": "Ethereum address performing the signing conformant to capitalization encoded checksum specified in EIP-55 where applicable.",
                "example": "0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B"
              },
              {
                "name": "statement",
                "type": "string",
                "description": "Human-readable ASCII assertion that the user will sign, and it must not contain `\n`.",
                "example": "Please confirm"
              },
              {
                "name": "uri",
                "type": "string",
                "description": "RFC 3986 URI referring to the resource that is the subject of the signing (as in the __subject__ of a claim).",
                "example": "https://defi.finance/"
              },
              {
                "name": "expirationTime",
                "type": "string",
                "description": "ISO 8601 datetime string that, if present, indicates when the signed authentication message is no longer valid.",
                "example": "2020-01-01T00:00:00.000Z"
              },
              {
                "name": "notBefore",
                "type": "string",
                "description": "ISO 8601 datetime string that, if present, indicates when the signed authentication message will become valid.",
                "example": "2020-01-01T00:00:00.000Z"
              },
              {
                "name": "resources",
                "type": "array",
                "description": "List of information or references to information the user wishes to have resolved as part of authentication by the relying party. They are expressed as RFC 3986 URIs separated by `\n- `.",
                "example": ["https://docs.moralis.io/"],
                "field": { "type": "string" }
              },
              {
                "name": "version",
                "type": "string",
                "description": "EIP-155 Chain ID to which the session is bound, and the network where Contract Accounts must be resolved.",
                "example": "1.0"
              },
              {
                "name": "nonce",
                "type": "string",
                "example": "0x1234567890abcdef0123456789abcdef1234567890abcdef"
              },
              {
                "name": "profileId",
                "type": "string",
                "description": "Unique identifier with a length of 66 characters",
                "example": "0xbfbcfab169c67072ff418133124480fea02175f1402aaa497daa4fd09026b0e1"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from 'moralis';\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n  });\n\n  // Values provided by the user\n  const message = \"\";\n  const signature = \"\";\n  const network = \"evm\";\n\n  const verifiedData = Moralis.Auth.verify({\n    message: message,\n    signature: signature,\n    network: network,\n  });\n} catch (e) {\n  console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import auth\n\napi_key = \"YOUR_API_KEY\"\nbody = {\n    \"message\": \"defi.finance wants you to sign in with your Ethereum account:<br/>0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B<br/><br/><br/>URI: https://defi.finance<br/>Version: 1<br/>Chain ID: 1<br/>Nonce: Px7Nh1RPzlCLwqgOb<br/>Issued At: 2022-11-30T10:20:00.262Z\", \n    \"signature\": \"0xa8f89a58bf9b433d3100f9e41ee35b5e31fb8c7cd62547acb113162ec6f2e4140207e2dfbd4e387e1801ebc7f08a9dd105ac1d22b2e2ff0df5fa8b6d9bdcfe491c\", \n}\n\nresult = auth.challenge.verify_challenge_evm(\n    api_key=api_key,\n    body=body,\n)\n\nprint(result)\n"
        }
      ]
    },
    "requestChallengeSolana": {
      "apiHost": "https://authapi.moralis.io",
      "summary": "Request Solana challenge",
      "method": "POST",
      "path": "/challenge/request/solana",
      "pathParams": [],
      "queryParams": [],
      "bodyParam": {
        "required": true,
        "description": "Request Solana challenge message.",
        "type": "object",
        "fields": [
          {
            "name": "domain",
            "type": "string",
            "description": "RFC 4501 dns authority that is requesting the signing.",
            "example": "defi.finance"
          },
          {
            "name": "network",
            "type": "string",
            "description": "The network where Contract Accounts must be resolved.",
            "example": "mainnet"
          },
          {
            "name": "address",
            "type": "string",
            "description": "Solana public key with a length of 32 - 44 characters that is used to perform the signing",
            "example": "26qv4GCcx98RihuK3c4T6ozB3J7L6VwCuFVc7Ta2A3Uo"
          },
          {
            "name": "statement",
            "type": "string",
            "description": "Human-readable ASCII assertion that the user will sign, and it must not contain `\n`.",
            "example": "Please confirm"
          },
          {
            "name": "uri",
            "type": "string",
            "description": "RFC 3986 URI referring to the resource that is the subject of the signing (as in the __subject__ of a claim).",
            "example": "https://defi.finance/"
          },
          {
            "name": "expirationTime",
            "type": "string",
            "description": "ISO 8601 datetime string that, if present, indicates when the signed authentication message is no longer valid.",
            "example": "2020-01-01T00:00:00.000Z"
          },
          {
            "name": "notBefore",
            "type": "string",
            "description": "ISO 8601 datetime string that, if present, indicates when the signed authentication message will become valid.",
            "example": "2020-01-01T00:00:00.000Z"
          },
          {
            "name": "resources",
            "type": "array",
            "description": "List of information or references to information the user wishes to have resolved as part of authentication by the relying party. They are expressed as RFC 3986 URIs separated by new lines.",
            "example": ["https://docs.moralis.io/"],
            "field": { "type": "string" }
          },
          {
            "name": "timeout",
            "type": "number",
            "description": "Time in seconds before the challenge is expired",
            "example": 15
          }
        ]
      },
      "responses": [
        {
          "status": "201",
          "description": "The back channel challenge containing the id to store on the api and the message to be signed by the user",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "id",
                "type": "string",
                "description": "17-characters Alphanumeric string Secret Challenge ID used to identify this particular request. Is should be used at the backend of the calling service to identify the completed request.",
                "example": "fRyt67D3eRss3RrX"
              },
              {
                "name": "message",
                "type": "string",
                "description": "Message that needs to be signed by the end user",
                "example": "defi.finance wants you to sign in with your Solana account:\n26qv4GCcx98RihuK3c4T6ozB3J7L6VwCuFVc7Ta2A3Uo\n\nI am a third party API\n\nURI: http://defi.finance\nVersion: 1\nNetwork: mainnet\nNonce: PYxxb9msdjVXsMQ9x\nIssued At: 2022-08-25T11:02:34.097Z\nExpiration Time: 2022-08-25T11:12:38.243Z\nResources:\n- https://docs.moralis.io/"
              },
              {
                "name": "profileId",
                "type": "string",
                "description": "Unique identifier with a length of 66 characters",
                "example": "0xbfbcfab169c67072ff418133124480fea02175f1402aaa497daa4fd09026b0e1"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from 'moralis';\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n  });\n\n  // Values set in the backend\n  const DOMAIN = 'defi.finance';\n  const STATEMENT = 'Please sign this message to confirm your identity.';\n  const URI = 'https://defi.finance';\n  const EXPIRATION_TIME = '2023-01-01T00:00:00.000Z';\n  const TIMEOUT = 15;\n\n  // Values provided by the user\n  const address = '26qv4GCcx98RihuK3c4T6ozB3J7L6VwCuFVc7Ta2A3Uo';\n  const solNetwork = 'mainnet';\n  const network = 'solana';\n\n  const result = await Moralis.Auth.requestMessage({\n    address,\n    solNetwork,\n    network,\n    domain: DOMAIN,\n    statement: STATEMENT,\n    uri: URI,\n    expirationTime: EXPIRATION_TIME,\n    timeout: TIMEOUT,\n  });\n} catch (e) {\n  console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import auth\n\napi_key = \"YOUR_API_KEY\"\nbody = {\n    \"domain\": \"defi.finance\", \n    \"network\": \"mainnet\", \n    \"address\": \"26qv4GCcx98RihuK3c4T6ozB3J7L6VwCuFVc7Ta2A3Uo\", \n    \"statement\": \"Please confirm\", \n    \"uri\": \"https://defi.finance/\", \n    \"expirationTime\": \"2020-01-01T00:00:00.000Z\", \n    \"notBefore\": \"2020-01-01T00:00:00.000Z\", \n    \"resources\": ['https://docs.moralis.io/'], \n    \"timeout\": 15, \n}\n\nresult = auth.challenge.request_challenge_solana(\n    api_key=api_key,\n    body=body,\n)\n\nprint(result)\n"
        }
      ]
    },
    "verifyChallengeSolana": {
      "apiHost": "https://authapi.moralis.io",
      "summary": "Verify Solana challenge",
      "method": "POST",
      "path": "/challenge/verify/solana",
      "pathParams": [],
      "queryParams": [],
      "bodyParam": {
        "required": true,
        "description": "Verify Solana challenge message.",
        "type": "object",
        "fields": [
          {
            "name": "message",
            "type": "string",
            "description": "Message that needs to be signed by the end user",
            "example": "defi.finance wants you to sign in with your Solana account:\n26qv4GCcx98RihuK3c4T6ozB3J7L6VwCuFVc7Ta2A3Uo\n\nI am a third party API\n\nURI: http://defi.finance\nVersion: 1\nNetwork: mainnet\nNonce: PYxxb9msdjVXsMQ9x\nIssued At: 2022-08-25T11:02:34.097Z\nExpiration Time: 2022-08-25T11:12:38.243Z\nResources:\n- https://docs.moralis.io/"
          },
          {
            "name": "signature",
            "type": "string",
            "description": "Base58 signature that needs to be used to verify end user",
            "example": "2pH9DqD5rve2qV4yBDshcAjWd2y8TqMx8BPb7f3KoNnuLEhE5JwjruYi4jaFaD4HN6wriLz2Vdr32kRBAJmHcyny"
          }
        ]
      },
      "responses": [
        {
          "status": "201",
          "description": "The token to be used to call the third party API from the client",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "id",
                "type": "string",
                "description": "17-characters Alphanumeric string Secret Challenge ID used to identify this particular request. Is should be used at the backend of the calling service to identify the completed request.",
                "example": "fRyt67D3eRss3RrX"
              },
              {
                "name": "domain",
                "type": "string",
                "description": "RFC 4501 dns authority that is requesting the signing.",
                "example": "defi.finance"
              },
              {
                "name": "network",
                "type": "string",
                "description": "The network where Contract Accounts must be resolved.",
                "example": "mainnet"
              },
              {
                "name": "address",
                "type": "string",
                "description": "Solana public key with a length of 32 - 44 characters that is used to perform the signing",
                "example": "26qv4GCcx98RihuK3c4T6ozB3J7L6VwCuFVc7Ta2A3Uo"
              },
              {
                "name": "statement",
                "type": "string",
                "description": "Human-readable ASCII assertion that the user will sign, and it must not contain `\n`.",
                "example": "Please confirm"
              },
              {
                "name": "uri",
                "type": "string",
                "description": "RFC 3986 URI referring to the resource that is the subject of the signing (as in the __subject__ of a claim).",
                "example": "https://defi.finance/"
              },
              {
                "name": "expirationTime",
                "type": "string",
                "description": "ISO 8601 datetime string that, if present, indicates when the signed authentication message is no longer valid.",
                "example": "2020-01-01T00:00:00.000Z"
              },
              {
                "name": "notBefore",
                "type": "string",
                "description": "ISO 8601 datetime string that, if present, indicates when the signed authentication message will become valid.",
                "example": "2020-01-01T00:00:00.000Z"
              },
              {
                "name": "resources",
                "type": "array",
                "description": "List of information or references to information the user wishes to have resolved as part of authentication by the relying party. They are expressed as RFC 3986 URIs separated by `\n- `.",
                "example": ["https://docs.moralis.io/"],
                "field": { "type": "string" }
              },
              {
                "name": "version",
                "type": "string",
                "description": "EIP-155 Chain ID to which the session is bound, and the network where Contract Accounts must be resolved.",
                "example": "1.0"
              },
              {
                "name": "nonce",
                "type": "string",
                "example": "0x1234567890abcdef0123456789abcdef1234567890abcdef"
              },
              {
                "name": "profileId",
                "type": "string",
                "description": "Unique identifier with a length of 66 characters",
                "example": "0xbfbcfab169c67072ff418133124480fea02175f1402aaa497daa4fd09026b0e1"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from 'moralis';\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n  });\n\n  // Values provided by the user\n  const message = \"\";\n  const signature = \"\";\n  const network = \"solana\";\n\n  const verifiedData = Moralis.Auth.verify({\n    message: message,\n    signature: signature,\n    network: network,\n  });\n} catch (e) {\n  console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import auth\n\napi_key = \"YOUR_API_KEY\"\nbody = {\n    \"message\": \"defi.finance wants you to sign in with your Solana account:<br/>26qv4GCcx98RihuK3c4T6ozB3J7L6VwCuFVc7Ta2A3Uo<br/><br/>I am a third party API<br/><br/>URI: http://defi.finance<br/>Version: 1<br/>Network: mainnet<br/>Nonce: PYxxb9msdjVXsMQ9x<br/>Issued At: 2022-08-25T11:02:34.097Z<br/>Expiration Time: 2022-08-25T11:12:38.243Z<br/>Resources:<br/>- https://docs.moralis.io/\", \n    \"signature\": \"2pH9DqD5rve2qV4yBDshcAjWd2y8TqMx8BPb7f3KoNnuLEhE5JwjruYi4jaFaD4HN6wriLz2Vdr32kRBAJmHcyny\", \n}\n\nresult = auth.challenge.verify_challenge_solana(\n    api_key=api_key,\n    body=body,\n)\n\nprint(result)\n"
        }
      ]
    }
  },
  "streams": {
    "GetHistory": {
      "apiHost": "https://api.moralis-streams.com",
      "summary": "Get history",
      "description": "Get all history",
      "method": "GET",
      "path": "/history",
      "pathParams": [],
      "queryParams": [
        { "name": "limit", "required": true, "type": "number" },
        { "name": "cursor", "required": false, "type": "string" },
        { "name": "excludePayload", "required": false, "type": "boolean" }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Ok",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "result",
                "type": "object",
                "fields": [
                  {
                    "name": "id",
                    "type": "string",
                    "description": "Stringified UUIDv4.\nSee [RFC 4112](https://tools.ietf.org/html/rfc4122)",
                    "format": "uuid",
                    "pattern": "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"
                  },
                  { "name": "date", "type": "string" },
                  {
                    "name": "payload",
                    "type": "object",
                    "fields": [
                      {
                        "name": "block",
                        "type": "object",
                        "required": true,
                        "fields": [
                          {
                            "name": "number",
                            "type": "string",
                            "required": true
                          },
                          {
                            "name": "hash",
                            "type": "string",
                            "required": true
                          },
                          {
                            "name": "timestamp",
                            "type": "string",
                            "required": true
                          }
                        ]
                      },
                      { "name": "chainId", "type": "string", "required": true },
                      {
                        "name": "logs",
                        "required": true,
                        "field": {
                          "type": "object",
                          "fields": [
                            {
                              "name": "triggers",
                              "field": {
                                "type": "object",
                                "fields": [
                                  {
                                    "name": "value",
                                    "type": "string",
                                    "required": true
                                  },
                                  {
                                    "name": "name",
                                    "type": "string",
                                    "required": true
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "name": "logIndex",
                              "type": "string",
                              "required": true
                            },
                            {
                              "name": "transactionHash",
                              "type": "string",
                              "required": true
                            },
                            {
                              "name": "address",
                              "type": "string",
                              "required": true
                            },
                            {
                              "name": "data",
                              "type": "string",
                              "required": true
                            },
                            {
                              "name": "topic0",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "topic1",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "topic2",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "topic3",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            }
                          ]
                        },
                        "type": "array"
                      },
                      {
                        "name": "txs",
                        "required": true,
                        "field": {
                          "type": "object",
                          "fields": [
                            {
                              "name": "triggers",
                              "field": {
                                "type": "object",
                                "fields": [
                                  {
                                    "name": "value",
                                    "type": "string",
                                    "required": true
                                  },
                                  {
                                    "name": "name",
                                    "type": "string",
                                    "required": true
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "name": "hash",
                              "type": "string",
                              "required": true
                            },
                            {
                              "name": "gas",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "gasPrice",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "nonce",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "input",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "transactionIndex",
                              "type": "string",
                              "required": true
                            },
                            {
                              "name": "fromAddress",
                              "type": "string",
                              "required": true
                            },
                            {
                              "name": "toAddress",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "value",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "type",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "v",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "r",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "s",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "receiptCumulativeGasUsed",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "receiptGasUsed",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "receiptContractAddress",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "receiptRoot",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "receiptStatus",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            }
                          ]
                        },
                        "type": "array"
                      },
                      {
                        "name": "txsInternal",
                        "required": true,
                        "field": {
                          "type": "object",
                          "fields": [
                            {
                              "name": "from",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "to",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "value",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            },
                            {
                              "name": "transactionHash",
                              "type": "string",
                              "required": true
                            },
                            {
                              "name": "gas",
                              "type": "string",
                              "nullable": true,
                              "required": true
                            }
                          ]
                        },
                        "type": "array"
                      },
                      {
                        "name": "abi",
                        "field": { "type": "json" },
                        "type": "array",
                        "required": true
                      },
                      {
                        "name": "retries",
                        "type": "number",
                        "format": "double",
                        "required": true
                      },
                      {
                        "name": "confirmed",
                        "type": "boolean",
                        "required": true
                      },
                      { "name": "tag", "type": "string", "required": true },
                      { "name": "streamId", "type": "string", "required": true }
                    ],
                    "additionalProperties": false
                  },
                  {
                    "name": "tinyPayload",
                    "type": "object",
                    "fields": [
                      {
                        "name": "chainId",
                        "type": "string",
                        "required": true
                      },
                      {
                        "name": "confirmed",
                        "type": "boolean",
                        "required": true
                      },
                      { "name": "block", "type": "string", "required": true },
                      {
                        "name": "records",
                        "type": "number",
                        "format": "double",
                        "required": true
                      },
                      {
                        "name": "retries",
                        "type": "number",
                        "format": "double",
                        "required": true
                      }
                    ],
                    "additionalProperties": false
                  },
                  { "name": "errorMessage", "type": "string" },
                  { "name": "webhookUrl", "type": "string" },
                  { "name": "streamId", "type": "string" },
                  { "name": "tag", "type": "string" }
                ]
              },
              { "name": "cursor", "type": "string" },
              { "name": "total", "type": "number" }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from \"moralis\";\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n    // ...and any other configuration\n  });\n  \nconst limit = 10;\n\n  const { result } = await Moralis.Streams.getHistory({\n  limit,\n});\n\n  console.log(result);\n} catch (e) {\n  console.error(e);\n}",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import streams\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"limit\": 1.2, \n    \"cursor\": \"\", \n    \"excludePayload\": True, \n}\n\nresult = streams.history.get_history(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "ReplayHistory": {
      "apiHost": "https://api.moralis-streams.com",
      "summary": "Replay history",
      "description": "Replay a specific history.",
      "method": "POST",
      "path": "/history/replay/:streamId/:id",
      "pathParams": [
        {
          "name": "streamId",
          "description": "The id of the stream the history will be replayed",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "description": "The id of the history to replay",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [],
      "responses": [
        {
          "status": "200",
          "description": "Ok",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "id",
                "type": "string",
                "description": "Stringified UUIDv4.\nSee [RFC 4112](https://tools.ietf.org/html/rfc4122)",
                "format": "uuid",
                "pattern": "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"
              },
              { "name": "date", "type": "string" },
              {
                "name": "payload",
                "type": "object",
                "fields": [
                  {
                    "name": "block",
                    "type": "object",
                    "required": true,
                    "fields": [
                      {
                        "name": "number",
                        "type": "string"
                      },
                      { "name": "hash", "type": "string" },
                      { "name": "timestamp", "type": "string" }
                    ]
                  },
                  {
                    "name": "chainId",
                    "type": "string",
                    "required": true
                  },
                  {
                    "name": "logs",
                    "field": [
                      {
                        "name": "triggers",
                        "field": [
                          {
                            "type": "object",
                            "fields": [
                              {
                                "name": "value",
                                "type": "string",
                                "required": true
                              },
                              {
                                "name": "name",
                                "type": "string",
                                "required": true
                              }
                            ]
                          }
                        ],
                        "type": "array"
                      },
                      {
                        "name": "logIndex",
                        "type": "string",
                        "required": true
                      },
                      {
                        "name": "transactionHash",
                        "type": "string",
                        "required": true
                      },
                      { "name": "address", "type": "string", "required": true },
                      { "name": "data", "type": "string", "required": true },
                      {
                        "name": "topic0",
                        "type": "string",
                        "nullable": true,
                        "required": true
                      },
                      {
                        "name": "topic1",
                        "type": "string",
                        "nullable": true,
                        "required": true
                      },
                      {
                        "name": "topic2",
                        "type": "string",
                        "nullable": true,
                        "required": true
                      },
                      {
                        "name": "topic3",
                        "type": "string",
                        "nullable": true,
                        "required": true
                      }
                    ],
                    "type": "array",
                    "required": true
                  },
                  {
                    "name": "txs",
                    "field": {
                      "type": "object",
                      "fields": [
                        {
                          "name": "triggers",
                          "field": [
                            {
                              "type": "object",
                              "fields": [
                                {
                                  "name": "value",
                                  "type": "string",
                                  "required": true
                                },
                                {
                                  "name": "name",
                                  "type": "string",
                                  "required": true
                                }
                              ]
                            }
                          ],
                          "type": "array"
                        },
                        {
                          "name": "hash",
                          "type": "string",
                          "required": true
                        },
                        {
                          "name": "gas",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        },
                        {
                          "name": "gasPrice",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        },
                        {
                          "name": "nonce",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        },
                        {
                          "name": "input",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        },
                        {
                          "name": "transactionIndex",
                          "type": "string",
                          "required": true
                        },
                        {
                          "name": "fromAddress",
                          "type": "string",
                          "required": true
                        },
                        {
                          "name": "toAddress",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        },
                        {
                          "name": "value",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        },
                        {
                          "name": "type",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        },
                        {
                          "name": "v",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        },
                        {
                          "name": "r",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        },
                        {
                          "name": "s",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        },
                        {
                          "name": "receiptCumulativeGasUsed",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        },
                        {
                          "name": "receiptGasUsed",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        },
                        {
                          "name": "receiptContractAddress",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        },
                        {
                          "name": "receiptRoot",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        },
                        {
                          "name": "receiptStatus",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        }
                      ]
                    },
                    "type": "array",
                    "required": true
                  },
                  {
                    "name": "txsInternal",
                    "field": {
                      "type": "object",
                      "fields": [
                        {
                          "name": "from",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        },
                        {
                          "name": "to",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        },
                        {
                          "name": "value",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        },
                        {
                          "name": "transactionHash",
                          "type": "string",
                          "required": true
                        },
                        {
                          "name": "gas",
                          "type": "string",
                          "nullable": true,
                          "required": true
                        }
                      ]
                    },
                    "type": "array",
                    "required": true
                  },
                  {
                    "name": "abi",
                    "description": "The abi to parse the log object of the contract",
                    "field": [
                      {
                        "type": "object",
                        "fields": [
                          { "name": "anonymous", "type": "boolean" },
                          { "name": "constant", "type": "boolean" },
                          {
                            "name": "inputs",
                            "field": {
                              "type": "json"
                            },
                            "type": "array"
                          },
                          {
                            "name": "name",
                            "type": "string"
                          },
                          {
                            "name": "outputs",
                            "field": {
                              "type": "json"
                            },
                            "type": "array"
                          },
                          { "name": "payable", "type": "boolean" },
                          { "name": "stateMutability", "type": "string" },
                          {
                            "name": "type",
                            "type": "string",
                            "required": true
                          },
                          {
                            "name": "gas",
                            "type": "number",
                            "format": "double"
                          }
                        ]
                      }
                    ],
                    "type": "array",
                    "required": true
                  },
                  {
                    "name": "retries",
                    "type": "number",
                    "format": "double",
                    "required": true
                  },
                  {
                    "name": "confirmed",
                    "type": "boolean",
                    "required": true
                  },
                  {
                    "name": "tag",
                    "type": "string",
                    "required": true
                  },
                  {
                    "name": "streamId",
                    "type": "string",
                    "required": true
                  }
                ]
              },
              {
                "name": "tinyPayload",
                "type": "object",
                "fields": [
                  {
                    "name": "chainId",
                    "type": "string",
                    "required": true
                  },
                  { "name": "confirmed", "type": "boolean", "required": true },
                  { "name": "block", "type": "string", "required": true },
                  {
                    "name": "records",
                    "type": "number",
                    "format": "double",
                    "required": true
                  },
                  {
                    "name": "retries",
                    "type": "number",
                    "format": "double",
                    "required": true
                  }
                ],
                "additionalProperties": false
              },
              { "name": "errorMessage", "type": "string" },
              { "name": "webhookUrl", "type": "string" },
              { "name": "streamId", "type": "string" },
              { "name": "tag", "type": "string" }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from \"moralis\";\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n    // ...and any other configuration\n  });\n  \nconst id = \"id-1\";\nconst streamId = \"stream-1\";\n\n  const { result } = await Moralis.Streams.retry({\n  id,\n  streamId,\n});\n\n  console.log(result);\n} catch (e) {\n  console.error(e);\n}",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import streams\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"streamId\": \"\", \n    \"id\": \"\", \n}\n\nresult = streams.history.replay_history(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "SetSettings": {
      "apiHost": "https://api.moralis-streams.com",
      "summary": "Set project settings",
      "description": "Set the settings for the current project based on the project api-key.",
      "method": "POST",
      "path": "/settings",
      "pathParams": [],
      "queryParams": [],
      "bodyParam": {
        "required": true,
        "type": "object",
        "fields": [
          {
            "name": "region",
            "type": "string",
            "description": "The region from where all the webhooks will be posted for this project",
            "enum": ["us-east-1", "us-west-2", "eu-central-1", "ap-southeast-1"]
          }
        ]
      },
      "responses": [
        {
          "status": "200",
          "description": "Ok",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "region",
                "type": "string",
                "description": "The region from where all the webhooks will be posted for this project",
                "enum": [
                  "us-east-1",
                  "us-west-2",
                  "eu-central-1",
                  "ap-southeast-1"
                ]
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from \"moralis\";\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n    // ...and any other configuration\n  });\n  \n  const { result } = await Moralis.Streams.readSettings();\n\n  console.log(result);\n} catch (e) {\n  console.error(e);\n}",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import streams\n\napi_key = \"YOUR_API_KEY\"\n\nresult = streams.project.get_settings(\n    api_key=api_key,\n)\n\nprint(result)\n"
        }
      ]
    },
    "GetSettings": {
      "apiHost": "https://api.moralis-streams.com",
      "summary": "Get project settings",
      "description": "Get the settings for the current project based on the project api-key.",
      "method": "GET",
      "path": "/settings",
      "pathParams": [],
      "queryParams": [],
      "responses": [
        {
          "status": "200",
          "description": "Ok",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "region",
                "type": "string",
                "description": "The region from where all the webhooks will be posted for this project",
                "enum": [
                  "us-east-1",
                  "us-west-2",
                  "eu-central-1",
                  "ap-southeast-1"
                ]
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from \"moralis\";\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n    // ...and any other configuration\n  });\n  \n  const { result } = await Moralis.Streams.readSettings();\n\n  console.log(result);\n} catch (e) {\n  console.error(e);\n}",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import streams\n\napi_key = \"YOUR_API_KEY\"\n\nresult = streams.project.get_settings(\n    api_key=api_key,\n)\n\nprint(result)\n"
        }
      ]
    },
    "GetStats": {
      "apiHost": "https://api.moralis-streams.com",
      "summary": "Get project stats",
      "description": "Get the global stats for the account.",
      "method": "GET",
      "path": "/stats",
      "pathParams": [],
      "queryParams": [],
      "responses": [
        {
          "status": "200",
          "description": "Ok",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "totalWebhooksDelivered",
                "type": "number",
                "description": "The total amount of webhooks delivered across all streams"
              },
              {
                "name": "totalWebhooksFailed",
                "type": "number",
                "description": "The total amount of failed webhooks across all streams"
              },
              {
                "name": "totalLogsProcessed",
                "type": "number",
                "description": "The total amount of logs processed across all streams, this includes failed webhooks"
              },
              {
                "name": "totalTxsProcessed",
                "type": "number",
                "description": "The total amount of txs processed across all streams, this includes failed webhooks"
              },
              {
                "name": "totalTxsInternalProcessed",
                "type": "number",
                "description": "The total amount of internal txs processed across all streams, this includes failed webhooks"
              },
              {
                "name": "streams",
                "type": "object",
                "description": "Array of stream stats",
                "fields": [
                  {
                    "name": "totalWebhooksDelivered",
                    "type": "number",
                    "description": "The total amount of webhooks delivered across all streams"
                  },
                  {
                    "name": "totalWebhooksFailed",
                    "type": "number",
                    "description": "The total amount of failed webhooks across all streams"
                  },
                  {
                    "name": "totalLogsProcessed",
                    "type": "number",
                    "description": "The total amount of logs processed across all streams, this includes failed webhooks"
                  },
                  {
                    "name": "totalTxsProcessed",
                    "type": "number",
                    "description": "The total amount of txs processed across all streams, this includes failed webhooks"
                  },
                  {
                    "name": "totalTxsInternalProcessed",
                    "type": "number",
                    "description": "The total amount of internal txs processed across all streams, this includes failed webhooks"
                  },
                  {
                    "name": "streamId",
                    "type": "string",
                    "description": "The stream id"
                  }
                ]
              },
              {
                "name": "createdAt",
                "type": "string",
                "description": "The date since this stats are being counted"
              },
              {
                "name": "updatedAt",
                "type": "string",
                "description": "The date since this stats were last updated"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "python",
          "code": "from moralis import streams\n\napi_key = \"YOUR_API_KEY\"\n\nresult = streams.stats.get_stats(\n    api_key=api_key,\n)\n\nprint(result)\n"
        }
      ]
    },
    "GetStatsByStreamId": {
      "apiHost": "https://api.moralis-streams.com",
      "summary": "Get project stats by Stream ID",
      "description": "Get the stats for the streamId specified",
      "method": "GET",
      "path": "/stats/:streamId",
      "pathParams": [
        {
          "name": "streamId",
          "description": "The id of the stream to get the stats",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [],
      "responses": [
        {
          "status": "200",
          "description": "Ok",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "totalWebhooksDelivered",
                "type": "number",
                "description": "The total amount of webhooks delivered across all streams"
              },
              {
                "name": "totalWebhooksFailed",
                "type": "number",
                "description": "The total amount of failed webhooks across all streams"
              },
              {
                "name": "totalLogsProcessed",
                "type": "number",
                "description": "The total amount of logs processed across all streams, this includes failed webhooks"
              },
              {
                "name": "totalTxsProcessed",
                "type": "number",
                "description": "The total amount of txs processed across all streams, this includes failed webhooks"
              },
              {
                "name": "totalTxsInternalProcessed",
                "type": "number",
                "description": "The total amount of internal txs processed across all streams, this includes failed webhooks"
              },
              {
                "name": "streams",
                "type": "object",
                "description": "Array of stream stats",
                "fields": [
                  {
                    "name": "totalWebhooksDelivered",
                    "type": "number",
                    "description": "The total amount of webhooks delivered across all streams"
                  },
                  {
                    "name": "totalWebhooksFailed",
                    "type": "number",
                    "description": "The total amount of failed webhooks across all streams"
                  },
                  {
                    "name": "totalLogsProcessed",
                    "type": "number",
                    "description": "The total amount of logs processed across all streams, this includes failed webhooks"
                  },
                  {
                    "name": "totalTxsProcessed",
                    "type": "number",
                    "description": "The total amount of txs processed across all streams, this includes failed webhooks"
                  },
                  {
                    "name": "totalTxsInternalProcessed",
                    "type": "number",
                    "description": "The total amount of internal txs processed across all streams, this includes failed webhooks"
                  },
                  {
                    "name": "streamId",
                    "type": "string",
                    "description": "The stream id"
                  }
                ]
              },
              {
                "name": "createdAt",
                "type": "string",
                "description": "The date since this stats are being counted"
              },
              {
                "name": "updatedAt",
                "type": "string",
                "description": "The date since this stats were last updated"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "python",
          "code": "from moralis import streams\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"streamId\": \"\", \n}\n\nresult = streams.stats.get_stats_by_stream_id(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "GetStreams": {
      "apiHost": "https://api.moralis-streams.com",
      "summary": "Get streams",
      "description": "Get all the evm streams for the current project based on the project api-key.",
      "method": "GET",
      "path": "/streams/evm",
      "pathParams": [],
      "queryParams": [
        {
          "name": "limit",
          "description": "Limit response results max value 100",
          "required": true,
          "type": "number"
        },
        {
          "name": "cursor",
          "description": "Cursor for fetching next page",
          "required": false,
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Ok",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "result",
                "type": "object",
                "description": "Array of project Streams",
                "fields": [
                  {
                    "name": "webhookUrl",
                    "type": "string",
                    "description": "Webhook URL where moralis will send the POST request."
                  },
                  {
                    "name": "description",
                    "type": "string",
                    "description": "A description for this stream"
                  },
                  {
                    "name": "tag",
                    "type": "string",
                    "description": "A user-provided tag that will be send along the webhook, the user can use this tag to identify the specific stream if multiple streams are present"
                  },
                  {
                    "name": "topic0",
                    "type": "array",
                    "description": "An Array of topic0's in string-signature format ex: ['FunctionName(address,uint256)']",
                    "field": { "type": "string" }
                  },
                  {
                    "name": "allAddresses",
                    "type": "boolean",
                    "description": "Include events for all addresses (only applied when abi and topic0 is provided)"
                  },
                  {
                    "name": "includeNativeTxs",
                    "type": "boolean",
                    "description": "Include or not native transactions defaults to false (only applied when type:contract)"
                  },
                  {
                    "name": "includeContractLogs",
                    "type": "boolean",
                    "description": "Include or not logs of contract interactions defaults to false"
                  },
                  {
                    "name": "includeInternalTxs",
                    "type": "boolean",
                    "description": "Include or not include internal transactions defaults to false"
                  },
                  {
                    "name": "getNativeBalances",
                    "type": "object",
                    "description": "Include native balances for each address in the webhook",
                    "fields": [
                      {
                        "name": "selectors",
                        "type": "array",
                        "field": { "type": "string" }
                      },
                      { "name": "type", "type": "string" }
                    ]
                  },
                  {
                    "name": "abi",
                    "type": "object",
                    "fields": [
                      { "name": "anonymous", "type": "boolean" },
                      { "name": "constant", "type": "boolean" },
                      {
                        "name": "inputs",
                        "type": "object",
                        "fields": [
                          { "name": "name", "type": "string" },
                          { "name": "type", "type": "string" },
                          { "name": "indexed", "type": "boolean" },
                          { "name": "components", "type": "json" },
                          { "name": "internalType", "type": "string" }
                        ]
                      },
                      { "name": "name", "type": "string" },
                      {
                        "name": "outputs",
                        "type": "object",
                        "fields": [
                          { "name": "name", "type": "string" },
                          { "name": "type", "type": "string" },
                          { "name": "components", "type": "json" },
                          { "name": "internalType", "type": "string" }
                        ]
                      },
                      { "name": "payable", "type": "boolean" },
                      { "name": "stateMutability", "type": "string" },
                      { "name": "type", "type": "string" },
                      { "name": "gas", "type": "number" }
                    ]
                  },
                  {
                    "name": "advancedOptions",
                    "type": "object",
                    "fields": [
                      { "name": "topic0", "type": "string" },
                      {
                        "name": "filter",
                        "type": "json",
                        "description": "The filter object for the topic0\nhttps://docs.moralis.io/docs/filter-streams",
                        "example": {}
                      },
                      { "name": "includeNativeTxs", "type": "boolean" }
                    ]
                  },
                  {
                    "name": "chainIds",
                    "type": "array",
                    "description": "The ids of the chains for this stream in hex Ex: [\"0x1\",\"0x38\"]",
                    "field": { "type": "string" }
                  },
                  {
                    "name": "demo",
                    "type": "boolean",
                    "description": "Indicator if it is a demo stream"
                  },
                  {
                    "name": "triggers",
                    "type": "object",
                    "description": "triggers",
                    "fields": [
                      { "name": "type", "type": "string" },
                      { "name": "contractAddress", "type": "string" },
                      {
                        "name": "inputs",
                        "type": "array",
                        "field": {
                          "anyOf": [{ "type": "string" }, { "type": "json" }]
                        }
                      },
                      {
                        "name": "functionAbi",
                        "type": "object",
                        "description": "The abi to parse the log object of the contract",
                        "fields": [
                          {
                            "name": "anonymous",
                            "type": "boolean"
                          },
                          { "name": "constant", "type": "boolean" },
                          {
                            "name": "inputs",
                            "field": {
                              "type": "json"
                            },
                            "type": "array"
                          },
                          {
                            "name": "name",
                            "type": "string"
                          },
                          {
                            "name": "outputs",
                            "field": {
                              "type": "json"
                            },
                            "type": "array"
                          },
                          { "name": "payable", "type": "boolean" },
                          { "name": "stateMutability", "type": "string" },
                          {
                            "name": "type",
                            "type": "string",
                            "required": true
                          },
                          {
                            "name": "gas",
                            "type": "number",
                            "format": "double"
                          }
                        ],
                        "additionalProperties": false,
                        "example": {}
                      },
                      { "name": "topic0", "type": "string" },
                      { "name": "callFrom", "type": "string" }
                    ]
                  },
                  {
                    "name": "id",
                    "type": "string",
                    "description": "Stringified UUIDv4.\nSee [RFC 4112](https://tools.ietf.org/html/rfc4122)",
                    "format": "uuid",
                    "pattern": "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"
                  },
                  {
                    "name": "status",
                    "type": "string",
                    "description": "The stream status:\n[active] The Stream is healthy and processing blocks\n[paused] The Stream is paused and is not processing blocks\n[error] The Stream has encountered an error and is not processing blocks",
                    "enum": ["active", "paused", "error", "terminated"]
                  },
                  {
                    "name": "statusMessage",
                    "type": "string",
                    "description": "Description of current status of stream."
                  }
                ]
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "Cursor for fetching next page"
              },
              {
                "name": "total",
                "type": "number",
                "description": "Total count of streams on the project"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from \"moralis\";\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n    // ...and any other configuration\n  });\n  \nconst limit = 20;\n\n  const { result } = await Moralis.Streams.getAll({\n  limit,\n});\n\n  console.log(result);\n} catch (e) {\n  console.error(e);\n}",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import streams\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"limit\": 1.2, \n    \"cursor\": \"\", \n}\n\nresult = streams.evm.get_streams(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "CreateStream": {
      "apiHost": "https://api.moralis-streams.com",
      "summary": "Create stream",
      "description": "Creates a new evm stream.",
      "method": "PUT",
      "path": "/streams/evm",
      "pathParams": [],
      "queryParams": [],
      "bodyParam": {
        "required": true,
        "description": "Provide a Stream Model",
        "type": "object",
        "fields": [
          {
            "name": "webhookUrl",
            "type": "string",
            "description": "Webhook URL where moralis will send the POST request."
          },
          {
            "name": "description",
            "type": "string",
            "description": "A description for this stream"
          },
          {
            "name": "tag",
            "type": "string",
            "description": "A user-provided tag that will be send along the webhook, the user can use this tag to identify the specific stream if multiple streams are present"
          },
          {
            "name": "topic0",
            "type": "array",
            "description": "An Array of topic0's in string-signature format ex: ['FunctionName(address,uint256)']",
            "field": { "type": "string" }
          },
          {
            "name": "allAddresses",
            "type": "boolean",
            "description": "Include events for all addresses (only applied when abi and topic0 is provided)"
          },
          {
            "name": "includeNativeTxs",
            "type": "boolean",
            "description": "Include or not native transactions defaults to false (only applied when type:contract)"
          },
          {
            "name": "includeContractLogs",
            "type": "boolean",
            "description": "Include or not logs of contract interactions defaults to false"
          },
          {
            "name": "includeInternalTxs",
            "type": "boolean",
            "description": "Include or not include internal transactions defaults to false"
          },
          {
            "name": "getNativeBalances",
            "type": "object",
            "description": "Include native balances for each address in the webhook",
            "fields": [
              {
                "name": "selectors",
                "type": "array",
                "field": { "type": "string" }
              },
              { "name": "type", "type": "string" }
            ]
          },
          {
            "name": "abi",
            "type": "object",
            "fields": [
              { "name": "anonymous", "type": "boolean" },
              { "name": "constant", "type": "boolean" },
              {
                "name": "inputs",
                "type": "object",
                "fields": [
                  { "name": "name", "type": "string" },
                  { "name": "type", "type": "string" },
                  { "name": "indexed", "type": "boolean" },
                  { "name": "components", "type": "json" },
                  { "name": "internalType", "type": "string" }
                ]
              },
              { "name": "name", "type": "string" },
              {
                "name": "outputs",
                "type": "object",
                "fields": [
                  { "name": "name", "type": "string" },
                  { "name": "type", "type": "string" },
                  { "name": "components", "type": "json" },
                  { "name": "internalType", "type": "string" }
                ]
              },
              { "name": "payable", "type": "boolean" },
              { "name": "stateMutability", "type": "string" },
              { "name": "type", "type": "string" },
              { "name": "gas", "type": "number" }
            ]
          },
          {
            "name": "advancedOptions",
            "type": "object",
            "fields": [
              { "name": "topic0", "type": "string" },
              {
                "name": "filter",
                "type": "json",
                "description": "The filter object for the topic0\nhttps://docs.moralis.io/docs/filter-streams",
                "example": {}
              },
              { "name": "includeNativeTxs", "type": "boolean" }
            ]
          },
          {
            "name": "chainIds",
            "type": "array",
            "description": "The ids of the chains for this stream in hex Ex: [\"0x1\",\"0x38\"]",
            "field": { "type": "string" }
          },
          {
            "name": "demo",
            "type": "boolean",
            "description": "Indicator if it is a demo stream"
          },
          {
            "name": "triggers",
            "type": "object",
            "description": "triggers",
            "fields": [
              { "name": "type", "type": "string" },
              { "name": "contractAddress", "type": "string" },
              {
                "name": "inputs",
                "type": "array",
                "field": {
                  "anyOf": [{ "type": "string" }, { "type": "json" }]
                }
              },
              {
                "name": "functionAbi",
                "type": "object",
                "description": "The abi to parse the log object of the contract",
                "fields": [
                  {
                    "name": "anonymous",
                    "type": "boolean"
                  },
                  { "name": "constant", "type": "boolean" },
                  {
                    "name": "inputs",
                    "field": { "type": "json" },
                    "type": "array"
                  },
                  {
                    "name": "name",
                    "type": "string"
                  },
                  {
                    "name": "outputs",
                    "field": { "type": "json" },
                    "type": "array"
                  },
                  {
                    "name": "payable",
                    "type": "boolean"
                  },
                  { "name": "stateMutability", "type": "string" },
                  { "name": "type", "type": "string", "required": true },
                  { "name": "gas", "type": "number", "format": "double" }
                ],
                "example": {}
              },
              { "name": "topic0", "type": "string" },
              { "name": "callFrom", "type": "string" }
            ]
          }
        ]
      },
      "responses": [
        {
          "status": "200",
          "description": "Ok",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "webhookUrl",
                "type": "string",
                "description": "Webhook URL where moralis will send the POST request."
              },
              {
                "name": "description",
                "type": "string",
                "description": "A description for this stream"
              },
              {
                "name": "tag",
                "type": "string",
                "description": "A user-provided tag that will be send along the webhook, the user can use this tag to identify the specific stream if multiple streams are present"
              },
              {
                "name": "topic0",
                "type": "array",
                "description": "An Array of topic0's in string-signature format ex: ['FunctionName(address,uint256)']",
                "field": { "type": "string" }
              },
              {
                "name": "allAddresses",
                "type": "boolean",
                "description": "Include events for all addresses (only applied when abi and topic0 is provided)"
              },
              {
                "name": "includeNativeTxs",
                "type": "boolean",
                "description": "Include or not native transactions defaults to false (only applied when type:contract)"
              },
              {
                "name": "includeContractLogs",
                "type": "boolean",
                "description": "Include or not logs of contract interactions defaults to false"
              },
              {
                "name": "includeInternalTxs",
                "type": "boolean",
                "description": "Include or not include internal transactions defaults to false"
              },
              {
                "name": "getNativeBalances",
                "type": "object",
                "description": "Include native balances for each address in the webhook",
                "fields": [
                  {
                    "name": "selectors",
                    "type": "array",
                    "field": { "type": "string" }
                  },
                  { "name": "type", "type": "string" }
                ]
              },
              {
                "name": "abi",
                "type": "object",
                "fields": [
                  { "name": "anonymous", "type": "boolean" },
                  { "name": "constant", "type": "boolean" },
                  {
                    "name": "inputs",
                    "type": "object",
                    "fields": [
                      { "name": "name", "type": "string" },
                      { "name": "type", "type": "string" },
                      { "name": "indexed", "type": "boolean" },
                      { "name": "components", "type": "json" },
                      { "name": "internalType", "type": "string" }
                    ]
                  },
                  { "name": "name", "type": "string" },
                  {
                    "name": "outputs",
                    "type": "object",
                    "fields": [
                      { "name": "name", "type": "string" },
                      { "name": "type", "type": "string" },
                      { "name": "components", "type": "json" },
                      { "name": "internalType", "type": "string" }
                    ]
                  },
                  { "name": "payable", "type": "boolean" },
                  { "name": "stateMutability", "type": "string" },
                  { "name": "type", "type": "string" },
                  { "name": "gas", "type": "number" }
                ]
              },
              {
                "name": "advancedOptions",
                "type": "object",
                "fields": [
                  { "name": "topic0", "type": "string" },
                  {
                    "name": "filter",
                    "type": "json",
                    "description": "The filter object for the topic0\nhttps://docs.moralis.io/docs/filter-streams",
                    "example": {}
                  },
                  { "name": "includeNativeTxs", "type": "boolean" }
                ]
              },
              {
                "name": "chainIds",
                "type": "array",
                "description": "The ids of the chains for this stream in hex Ex: [\"0x1\",\"0x38\"]",
                "field": { "type": "string" }
              },
              {
                "name": "demo",
                "type": "boolean",
                "description": "Indicator if it is a demo stream"
              },
              {
                "name": "triggers",
                "type": "object",
                "description": "triggers",
                "fields": [
                  { "name": "type", "type": "string" },
                  { "name": "contractAddress", "type": "string" },
                  {
                    "name": "inputs",
                    "type": "array",
                    "field": {
                      "anyOf": [{ "type": "string" }, { "type": "json" }]
                    }
                  },
                  {
                    "name": "functionAbi",
                    "type": "object",
                    "description": "The abi to parse the log object of the contract",
                    "fields": [
                      {
                        "name": "anonymous",
                        "type": "boolean"
                      },
                      { "name": "constant", "type": "boolean" },
                      {
                        "name": "inputs",
                        "field": { "type": "json" },
                        "type": "array"
                      },
                      { "name": "name", "type": "string" },
                      {
                        "name": "outputs",
                        "field": { "type": "json" },
                        "type": "array"
                      },
                      { "name": "payable", "type": "boolean" },
                      { "name": "stateMutability", "type": "string" },
                      { "name": "type", "type": "string", "required": true },
                      { "name": "gas", "type": "number", "format": "double" }
                    ],
                    "additionalProperties": false,
                    "example": {}
                  },
                  { "name": "topic0", "type": "string" },
                  { "name": "callFrom", "type": "string" }
                ]
              },
              {
                "name": "id",
                "type": "string",
                "description": "Stringified UUIDv4.\nSee [RFC 4112](https://tools.ietf.org/html/rfc4122)",
                "format": "uuid",
                "pattern": "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"
              },
              {
                "name": "status",
                "type": "string",
                "description": "The stream status:\n[active] The Stream is healthy and processing blocks\n[paused] The Stream is paused and is not processing blocks\n[error] The Stream has encountered an error and is not processing blocks",
                "enum": ["active", "paused", "error", "terminated"]
              },
              {
                "name": "statusMessage",
                "type": "string",
                "description": "Description of current status of stream."
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from \"moralis\";\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n    // ...and any other configuration\n  });\n  \nconst limit = 20;\n\n  const { result } = await Moralis.Streams.getAll({\n  limit,\n});\n\n  console.log(result);\n} catch (e) {\n  console.error(e);\n}",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import streams\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"limit\": 1.2, \n    \"cursor\": \"\", \n}\n\nresult = streams.evm.get_streams(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "GetStream": {
      "apiHost": "https://api.moralis-streams.com",
      "summary": "Get a specific evm stream.",
      "description": "Get a specific evm stream.",
      "method": "GET",
      "path": "/streams/evm/:id",
      "pathParams": [
        {
          "name": "id",
          "description": "The id of the stream to get",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [],
      "responses": [
        {
          "status": "200",
          "description": "Ok",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "webhookUrl",
                "type": "string",
                "description": "Webhook URL where moralis will send the POST request."
              },
              {
                "name": "description",
                "type": "string",
                "description": "A description for this stream"
              },
              {
                "name": "tag",
                "type": "string",
                "description": "A user-provided tag that will be send along the webhook, the user can use this tag to identify the specific stream if multiple streams are present"
              },
              {
                "name": "topic0",
                "type": "array",
                "description": "An Array of topic0's in string-signature format ex: ['FunctionName(address,uint256)']",
                "field": { "type": "string" }
              },
              {
                "name": "allAddresses",
                "type": "boolean",
                "description": "Include events for all addresses (only applied when abi and topic0 is provided)"
              },
              {
                "name": "includeNativeTxs",
                "type": "boolean",
                "description": "Include or not native transactions defaults to false (only applied when type:contract)"
              },
              {
                "name": "includeContractLogs",
                "type": "boolean",
                "description": "Include or not logs of contract interactions defaults to false"
              },
              {
                "name": "includeInternalTxs",
                "type": "boolean",
                "description": "Include or not include internal transactions defaults to false"
              },
              {
                "name": "getNativeBalances",
                "type": "object",
                "description": "Include native balances for each address in the webhook",
                "fields": [
                  {
                    "name": "selectors",
                    "type": "array",
                    "field": { "type": "string" }
                  },
                  { "name": "type", "type": "string" }
                ]
              },
              {
                "name": "abi",
                "type": "object",
                "fields": [
                  { "name": "anonymous", "type": "boolean" },
                  { "name": "constant", "type": "boolean" },
                  {
                    "name": "inputs",
                    "type": "object",
                    "fields": [
                      { "name": "name", "type": "string" },
                      { "name": "type", "type": "string" },
                      { "name": "indexed", "type": "boolean" },
                      { "name": "components", "type": "json" },
                      { "name": "internalType", "type": "string" }
                    ]
                  },
                  { "name": "name", "type": "string" },
                  {
                    "name": "outputs",
                    "type": "object",
                    "fields": [
                      { "name": "name", "type": "string" },
                      { "name": "type", "type": "string" },
                      { "name": "components", "type": "json" },
                      { "name": "internalType", "type": "string" }
                    ]
                  },
                  { "name": "payable", "type": "boolean" },
                  { "name": "stateMutability", "type": "string" },
                  { "name": "type", "type": "string" },
                  { "name": "gas", "type": "number" }
                ]
              },
              {
                "name": "advancedOptions",
                "type": "object",
                "fields": [
                  { "name": "topic0", "type": "string" },
                  {
                    "name": "filter",
                    "type": "json",
                    "description": "The filter object for the topic0\nhttps://docs.moralis.io/docs/filter-streams",
                    "example": {}
                  },
                  { "name": "includeNativeTxs", "type": "boolean" }
                ]
              },
              {
                "name": "chainIds",
                "type": "array",
                "description": "The ids of the chains for this stream in hex Ex: [\"0x1\",\"0x38\"]",
                "field": { "type": "string" }
              },
              {
                "name": "demo",
                "type": "boolean",
                "description": "Indicator if it is a demo stream"
              },
              {
                "name": "triggers",
                "type": "object",
                "description": "triggers",
                "fields": [
                  { "name": "type", "type": "string" },
                  { "name": "contractAddress", "type": "string" },
                  {
                    "name": "inputs",
                    "type": "array",
                    "field": {
                      "anyOf": [{ "type": "string" }, { "type": "json" }]
                    }
                  },
                  {
                    "name": "functionAbi",
                    "type": "object",
                    "description": "The abi to parse the log object of the contract",
                    "fields": [
                      {
                        "name": "anonymous",
                        "type": "boolean"
                      },
                      { "name": "constant", "type": "boolean" },
                      {
                        "name": "inputs",
                        "field": {
                          "type": "json"
                        },
                        "type": "array"
                      },
                      {
                        "name": "name",
                        "type": "string"
                      },
                      {
                        "name": "outputs",
                        "field": {
                          "type": "json"
                        },
                        "type": "array"
                      },
                      { "name": "payable", "type": "boolean" },
                      { "name": "stateMutability", "type": "string" },
                      {
                        "name": "type",
                        "type": "string",
                        "required": true
                      },
                      {
                        "name": "gas",
                        "type": "number",
                        "format": "double"
                      }
                    ],
                    "additionalProperties": false,
                    "example": {}
                  },
                  { "name": "topic0", "type": "string" },
                  { "name": "callFrom", "type": "string" }
                ]
              },
              {
                "name": "id",
                "type": "string",
                "description": "Stringified UUIDv4.\nSee [RFC 4112](https://tools.ietf.org/html/rfc4122)",
                "format": "uuid",
                "pattern": "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"
              },
              {
                "name": "status",
                "type": "string",
                "description": "The stream status:\n[active] The Stream is healthy and processing blocks\n[paused] The Stream is paused and is not processing blocks\n[error] The Stream has encountered an error and is not processing blocks",
                "enum": ["active", "paused", "error", "terminated"]
              },
              {
                "name": "statusMessage",
                "type": "string",
                "description": "Description of current status of stream."
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from \"moralis\";\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n    // ...and any other configuration\n  });\n  \nconst id = \"id-1\";\n\n  const { result } = await Moralis.Streams.getById({\n  id,\n});\n\n  console.log(result);\n} catch (e) {\n  console.error(e);\n}",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import streams\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"id\": \"\", \n}\n\nresult = streams.evm.get_stream(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "UpdateStream": {
      "apiHost": "https://api.moralis-streams.com",
      "summary": "Update stream",
      "description": "Updates a specific evm stream.",
      "method": "POST",
      "path": "/streams/evm/:id",
      "pathParams": [
        {
          "name": "id",
          "description": "The id of the stream to update",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [],
      "bodyParam": {
        "required": true,
        "description": "Provide a Stream Model",
        "type": "object",
        "fields": [
          {
            "name": "webhookUrl",
            "type": "string",
            "description": "Webhook URL where moralis will send the POST request."
          },
          {
            "name": "description",
            "type": "string",
            "description": "A description for this stream"
          },
          {
            "name": "tag",
            "type": "string",
            "description": "A user-provided tag that will be send along the webhook, the user can use this tag to identify the specific stream if multiple streams are present"
          },
          {
            "name": "topic0",
            "type": "array",
            "description": "An Array of topic0's in string-signature format ex: ['FunctionName(address,uint256)']",
            "field": { "type": "string" }
          },
          {
            "name": "allAddresses",
            "type": "boolean",
            "description": "Include events for all addresses (only applied when abi and topic0 is provided)"
          },
          {
            "name": "includeNativeTxs",
            "type": "boolean",
            "description": "Include or not native transactions defaults to false (only applied when type:contract)"
          },
          {
            "name": "includeContractLogs",
            "type": "boolean",
            "description": "Include or not logs of contract interactions defaults to false"
          },
          {
            "name": "includeInternalTxs",
            "type": "boolean",
            "description": "Include or not include internal transactions defaults to false"
          },
          {
            "name": "getNativeBalances",
            "type": "object",
            "description": "Include native balances for each address in the webhook",
            "fields": [
              {
                "name": "selectors",
                "type": "array",
                "field": { "type": "string" }
              },
              { "name": "type", "type": "string" }
            ]
          },
          {
            "name": "abi",
            "type": "object",
            "fields": [
              { "name": "anonymous", "type": "boolean" },
              { "name": "constant", "type": "boolean" },
              {
                "name": "inputs",
                "type": "object",
                "fields": [
                  { "name": "name", "type": "string" },
                  { "name": "type", "type": "string" },
                  { "name": "indexed", "type": "boolean" },
                  { "name": "components", "type": "json" },
                  { "name": "internalType", "type": "string" }
                ]
              },
              { "name": "name", "type": "string" },
              {
                "name": "outputs",
                "type": "object",
                "fields": [
                  { "name": "name", "type": "string" },
                  { "name": "type", "type": "string" },
                  { "name": "components", "type": "json" },
                  { "name": "internalType", "type": "string" }
                ]
              },
              { "name": "payable", "type": "boolean" },
              { "name": "stateMutability", "type": "string" },
              { "name": "type", "type": "string" },
              { "name": "gas", "type": "number" }
            ]
          },
          {
            "name": "advancedOptions",
            "type": "object",
            "fields": [
              { "name": "topic0", "type": "string" },
              {
                "name": "filter",
                "type": "json",
                "description": "The filter object for the topic0\nhttps://docs.moralis.io/docs/filter-streams",
                "example": {}
              },
              { "name": "includeNativeTxs", "type": "boolean" }
            ]
          },
          {
            "name": "chainIds",
            "type": "array",
            "description": "The ids of the chains for this stream in hex Ex: [\"0x1\",\"0x38\"]",
            "field": { "type": "string" }
          },
          {
            "name": "demo",
            "type": "boolean",
            "description": "Indicator if it is a demo stream"
          },
          {
            "name": "triggers",
            "type": "object",
            "description": "triggers",
            "fields": [
              { "name": "type", "type": "string" },
              { "name": "contractAddress", "type": "string" },
              {
                "name": "inputs",
                "type": "array",
                "field": {
                  "anyOf": [{ "type": "string" }, { "type": "json" }]
                }
              },
              {
                "name": "functionAbi",
                "type": "object",
                "description": "The abi to parse the log object of the contract",
                "fields": [
                  {
                    "name": "anonymous",
                    "type": "boolean"
                  },
                  { "name": "constant", "type": "boolean" },
                  {
                    "name": "inputs",
                    "field": {
                      "type": "json"
                    },
                    "type": "array"
                  },
                  {
                    "name": "name",
                    "type": "string"
                  },
                  {
                    "name": "outputs",
                    "field": {
                      "type": "json"
                    },
                    "type": "array"
                  },
                  { "name": "payable", "type": "boolean" },
                  { "name": "stateMutability", "type": "string" },
                  {
                    "name": "type",
                    "type": "string",
                    "required": true
                  },
                  {
                    "name": "gas",
                    "type": "number",
                    "format": "double"
                  }
                ],
                "additionalProperties": false,
                "example": {}
              },
              { "name": "topic0", "type": "string" },
              { "name": "callFrom", "type": "string" }
            ]
          }
        ]
      },
      "responses": [
        {
          "status": "200",
          "description": "Ok",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "webhookUrl",
                "type": "string",
                "description": "Webhook URL where moralis will send the POST request."
              },
              {
                "name": "description",
                "type": "string",
                "description": "A description for this stream"
              },
              {
                "name": "tag",
                "type": "string",
                "description": "A user-provided tag that will be send along the webhook, the user can use this tag to identify the specific stream if multiple streams are present"
              },
              {
                "name": "topic0",
                "type": "array",
                "description": "An Array of topic0's in string-signature format ex: ['FunctionName(address,uint256)']",
                "field": { "type": "string" }
              },
              {
                "name": "allAddresses",
                "type": "boolean",
                "description": "Include events for all addresses (only applied when abi and topic0 is provided)"
              },
              {
                "name": "includeNativeTxs",
                "type": "boolean",
                "description": "Include or not native transactions defaults to false (only applied when type:contract)"
              },
              {
                "name": "includeContractLogs",
                "type": "boolean",
                "description": "Include or not logs of contract interactions defaults to false"
              },
              {
                "name": "includeInternalTxs",
                "type": "boolean",
                "description": "Include or not include internal transactions defaults to false"
              },
              {
                "name": "getNativeBalances",
                "type": "object",
                "description": "Include native balances for each address in the webhook",
                "fields": [
                  {
                    "name": "selectors",
                    "type": "array",
                    "field": { "type": "string" }
                  },
                  { "name": "type", "type": "string" }
                ]
              },
              {
                "name": "abi",
                "type": "object",
                "fields": [
                  { "name": "anonymous", "type": "boolean" },
                  { "name": "constant", "type": "boolean" },
                  {
                    "name": "inputs",
                    "type": "object",
                    "fields": [
                      { "name": "name", "type": "string" },
                      { "name": "type", "type": "string" },
                      { "name": "indexed", "type": "boolean" },
                      { "name": "components", "type": "json" },
                      { "name": "internalType", "type": "string" }
                    ]
                  },
                  { "name": "name", "type": "string" },
                  {
                    "name": "outputs",
                    "type": "object",
                    "fields": [
                      { "name": "name", "type": "string" },
                      { "name": "type", "type": "string" },
                      { "name": "components", "type": "json" },
                      { "name": "internalType", "type": "string" }
                    ]
                  },
                  { "name": "payable", "type": "boolean" },
                  { "name": "stateMutability", "type": "string" },
                  { "name": "type", "type": "string" },
                  { "name": "gas", "type": "number" }
                ]
              },
              {
                "name": "advancedOptions",
                "type": "object",
                "fields": [
                  { "name": "topic0", "type": "string" },
                  {
                    "name": "filter",
                    "type": "json",
                    "description": "The filter object for the topic0\nhttps://docs.moralis.io/docs/filter-streams",
                    "example": {}
                  },
                  { "name": "includeNativeTxs", "type": "boolean" }
                ]
              },
              {
                "name": "chainIds",
                "type": "array",
                "description": "The ids of the chains for this stream in hex Ex: [\"0x1\",\"0x38\"]",
                "field": { "type": "string" }
              },
              {
                "name": "demo",
                "type": "boolean",
                "description": "Indicator if it is a demo stream"
              },
              {
                "name": "triggers",
                "type": "object",
                "description": "triggers",
                "fields": [
                  { "name": "type", "type": "string" },
                  { "name": "contractAddress", "type": "string" },
                  {
                    "name": "inputs",
                    "type": "array",
                    "field": {
                      "anyOf": [{ "type": "string" }, { "type": "json" }]
                    }
                  },
                  {
                    "name": "functionAbi",
                    "type": "object",
                    "description": "The abi to parse the log object of the contract",
                    "fields": [
                      {
                        "name": "anonymous",
                        "type": "boolean"
                      },
                      { "name": "constant", "type": "boolean" },
                      {
                        "name": "inputs",
                        "field": {
                          "type": "json"
                        },
                        "type": "array"
                      },
                      {
                        "name": "name",
                        "type": "string"
                      },
                      {
                        "name": "outputs",
                        "field": {
                          "type": "json"
                        },
                        "type": "array"
                      },
                      { "name": "payable", "type": "boolean" },
                      { "name": "stateMutability", "type": "string" },
                      {
                        "name": "type",
                        "type": "string",
                        "required": true
                      },
                      {
                        "name": "gas",
                        "type": "number",
                        "format": "double"
                      }
                    ],
                    "additionalProperties": false,
                    "example": {}
                  },
                  { "name": "topic0", "type": "string" },
                  { "name": "callFrom", "type": "string" }
                ]
              },
              {
                "name": "id",
                "type": "string",
                "description": "Stringified UUIDv4.\nSee [RFC 4112](https://tools.ietf.org/html/rfc4122)",
                "format": "uuid",
                "pattern": "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"
              },
              {
                "name": "status",
                "type": "string",
                "description": "The stream status:\n[active] The Stream is healthy and processing blocks\n[paused] The Stream is paused and is not processing blocks\n[error] The Stream has encountered an error and is not processing blocks",
                "enum": ["active", "paused", "error", "terminated"]
              },
              {
                "name": "statusMessage",
                "type": "string",
                "description": "Description of current status of stream."
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from \"moralis\";\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n    // ...and any other configuration\n  });\n  \nconst id = \"id-1\";\n\n  const { result } = await Moralis.Streams.getById({\n  id,\n});\n\n  console.log(result);\n} catch (e) {\n  console.error(e);\n}",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import streams\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"id\": \"\", \n}\n\nresult = streams.evm.get_stream(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "DeleteStream": {
      "apiHost": "https://api.moralis-streams.com",
      "summary": "Delete stream",
      "description": "Delete a specific evm stream.",
      "method": "DELETE",
      "path": "/streams/evm/:id",
      "pathParams": [
        {
          "name": "id",
          "description": "The id of the stream to delete",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [],
      "responses": [
        {
          "status": "200",
          "description": "Ok",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "webhookUrl",
                "type": "string",
                "description": "Webhook URL where moralis will send the POST request."
              },
              {
                "name": "description",
                "type": "string",
                "description": "A description for this stream"
              },
              {
                "name": "tag",
                "type": "string",
                "description": "A user-provided tag that will be send along the webhook, the user can use this tag to identify the specific stream if multiple streams are present"
              },
              {
                "name": "topic0",
                "type": "array",
                "description": "An Array of topic0's in string-signature format ex: ['FunctionName(address,uint256)']",
                "field": { "type": "string" }
              },
              {
                "name": "allAddresses",
                "type": "boolean",
                "description": "Include events for all addresses (only applied when abi and topic0 is provided)"
              },
              {
                "name": "includeNativeTxs",
                "type": "boolean",
                "description": "Include or not native transactions defaults to false (only applied when type:contract)"
              },
              {
                "name": "includeContractLogs",
                "type": "boolean",
                "description": "Include or not logs of contract interactions defaults to false"
              },
              {
                "name": "includeInternalTxs",
                "type": "boolean",
                "description": "Include or not include internal transactions defaults to false"
              },
              {
                "name": "getNativeBalances",
                "type": "object",
                "description": "Include native balances for each address in the webhook",
                "fields": [
                  {
                    "name": "selectors",
                    "type": "array",
                    "field": { "type": "string" }
                  },
                  { "name": "type", "type": "string" }
                ]
              },
              {
                "name": "abi",
                "type": "object",
                "fields": [
                  { "name": "anonymous", "type": "boolean" },
                  { "name": "constant", "type": "boolean" },
                  {
                    "name": "inputs",
                    "type": "object",
                    "fields": [
                      { "name": "name", "type": "string" },
                      { "name": "type", "type": "string" },
                      { "name": "indexed", "type": "boolean" },
                      { "name": "components", "type": "json" },
                      { "name": "internalType", "type": "string" }
                    ]
                  },
                  { "name": "name", "type": "string" },
                  {
                    "name": "outputs",
                    "type": "object",
                    "fields": [
                      { "name": "name", "type": "string" },
                      { "name": "type", "type": "string" },
                      { "name": "components", "type": "json" },
                      { "name": "internalType", "type": "string" }
                    ]
                  },
                  { "name": "payable", "type": "boolean" },
                  { "name": "stateMutability", "type": "string" },
                  { "name": "type", "type": "string" },
                  { "name": "gas", "type": "number" }
                ]
              },
              {
                "name": "advancedOptions",
                "type": "object",
                "fields": [
                  { "name": "topic0", "type": "string" },
                  {
                    "name": "filter",
                    "type": "json",
                    "description": "The filter object for the topic0\nhttps://docs.moralis.io/docs/filter-streams",
                    "example": {}
                  },
                  { "name": "includeNativeTxs", "type": "boolean" }
                ]
              },
              {
                "name": "chainIds",
                "type": "array",
                "description": "The ids of the chains for this stream in hex Ex: [\"0x1\",\"0x38\"]",
                "field": { "type": "string" }
              },
              {
                "name": "demo",
                "type": "boolean",
                "description": "Indicator if it is a demo stream"
              },
              {
                "name": "triggers",
                "type": "object",
                "description": "triggers",
                "fields": [
                  { "name": "type", "type": "string" },
                  { "name": "contractAddress", "type": "string" },
                  {
                    "name": "inputs",
                    "type": "array",
                    "field": {
                      "anyOf": [{ "type": "string" }, { "type": "json" }]
                    }
                  },
                  {
                    "name": "functionAbi",
                    "type": "object",
                    "description": "The abi to parse the log object of the contract",
                    "fields": [
                      {
                        "name": "anonymous",
                        "type": "boolean"
                      },
                      { "name": "constant", "type": "boolean" },
                      {
                        "name": "inputs",
                        "field": {
                          "type": "json"
                        },
                        "type": "array"
                      },
                      {
                        "name": "name",
                        "type": "string"
                      },
                      {
                        "name": "outputs",
                        "field": {
                          "type": "json"
                        },
                        "type": "array"
                      },
                      { "name": "payable", "type": "boolean" },
                      { "name": "stateMutability", "type": "string" },
                      {
                        "name": "type",
                        "type": "string",
                        "required": true
                      },
                      {
                        "name": "gas",
                        "type": "number",
                        "format": "double"
                      }
                    ],
                    "additionalProperties": false,
                    "example": {}
                  },
                  { "name": "topic0", "type": "string" },
                  { "name": "callFrom", "type": "string" }
                ]
              },
              {
                "name": "id",
                "type": "string",
                "description": "Stringified UUIDv4.\nSee [RFC 4112](https://tools.ietf.org/html/rfc4122)",
                "format": "uuid",
                "pattern": "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"
              },
              {
                "name": "status",
                "type": "string",
                "description": "The stream status:\n[active] The Stream is healthy and processing blocks\n[paused] The Stream is paused and is not processing blocks\n[error] The Stream has encountered an error and is not processing blocks",
                "enum": ["active", "paused", "error", "terminated"]
              },
              {
                "name": "statusMessage",
                "type": "string",
                "description": "Description of current status of stream."
              }
            ]
          }
        }
      ]
    },
    "UpdateStreamStatus": {
      "apiHost": "https://api.moralis-streams.com",
      "summary": "Update stream status",
      "description": "Updates the status of specific evm stream.",
      "method": "POST",
      "path": "/streams/evm/:id/status",
      "pathParams": [
        {
          "name": "id",
          "description": "The id of the stream to update",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [],
      "bodyParam": {
        "required": true,
        "description": "Provide a Stream Model",
        "type": "object",
        "fields": [
          {
            "name": "status",
            "type": "string",
            "description": "The stream status:\n[active] The Stream is healthy and processing blocks\n[paused] The Stream is paused and is not processing blocks\n[error] The Stream has encountered an error and is not processing blocks",
            "enum": ["active", "paused", "error", "terminated"]
          }
        ]
      },
      "responses": [
        {
          "status": "200",
          "description": "Ok",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "webhookUrl",
                "type": "string",
                "description": "Webhook URL where moralis will send the POST request."
              },
              {
                "name": "description",
                "type": "string",
                "description": "A description for this stream"
              },
              {
                "name": "tag",
                "type": "string",
                "description": "A user-provided tag that will be send along the webhook, the user can use this tag to identify the specific stream if multiple streams are present"
              },
              {
                "name": "topic0",
                "type": "array",
                "description": "An Array of topic0's in string-signature format ex: ['FunctionName(address,uint256)']",
                "field": { "type": "string" }
              },
              {
                "name": "allAddresses",
                "type": "boolean",
                "description": "Include events for all addresses (only applied when abi and topic0 is provided)"
              },
              {
                "name": "includeNativeTxs",
                "type": "boolean",
                "description": "Include or not native transactions defaults to false (only applied when type:contract)"
              },
              {
                "name": "includeContractLogs",
                "type": "boolean",
                "description": "Include or not logs of contract interactions defaults to false"
              },
              {
                "name": "includeInternalTxs",
                "type": "boolean",
                "description": "Include or not include internal transactions defaults to false"
              },
              {
                "name": "getNativeBalances",
                "type": "object",
                "description": "Include native balances for each address in the webhook",
                "fields": [
                  {
                    "name": "selectors",
                    "type": "array",
                    "field": { "type": "string" }
                  },
                  { "name": "type", "type": "string" }
                ]
              },
              {
                "name": "abi",
                "type": "object",
                "fields": [
                  { "name": "anonymous", "type": "boolean" },
                  { "name": "constant", "type": "boolean" },
                  {
                    "name": "inputs",
                    "type": "object",
                    "fields": [
                      { "name": "name", "type": "string" },
                      { "name": "type", "type": "string" },
                      { "name": "indexed", "type": "boolean" },
                      { "name": "components", "type": "json" },
                      { "name": "internalType", "type": "string" }
                    ]
                  },
                  { "name": "name", "type": "string" },
                  {
                    "name": "outputs",
                    "type": "object",
                    "fields": [
                      { "name": "name", "type": "string" },
                      { "name": "type", "type": "string" },
                      { "name": "components", "type": "json" },
                      { "name": "internalType", "type": "string" }
                    ]
                  },
                  { "name": "payable", "type": "boolean" },
                  { "name": "stateMutability", "type": "string" },
                  { "name": "type", "type": "string" },
                  { "name": "gas", "type": "number" }
                ]
              },
              {
                "name": "advancedOptions",
                "type": "object",
                "fields": [
                  { "name": "topic0", "type": "string" },
                  {
                    "name": "filter",
                    "type": "json",
                    "description": "The filter object for the topic0\nhttps://docs.moralis.io/docs/filter-streams",
                    "example": {}
                  },
                  { "name": "includeNativeTxs", "type": "boolean" }
                ]
              },
              {
                "name": "chainIds",
                "type": "array",
                "description": "The ids of the chains for this stream in hex Ex: [\"0x1\",\"0x38\"]",
                "field": { "type": "string" }
              },
              {
                "name": "demo",
                "type": "boolean",
                "description": "Indicator if it is a demo stream"
              },
              {
                "name": "triggers",
                "type": "object",
                "description": "triggers",
                "fields": [
                  { "name": "type", "type": "string" },
                  { "name": "contractAddress", "type": "string" },
                  {
                    "name": "inputs",
                    "type": "array",
                    "field": {
                      "anyOf": [{ "type": "string" }, { "type": "json" }]
                    }
                  },
                  {
                    "name": "functionAbi",
                    "type": "object",
                    "description": "The abi to parse the log object of the contract",
                    "fields": [
                      {
                        "name": "anonymous",
                        "type": "boolean"
                      },
                      { "name": "constant", "type": "boolean" },
                      {
                        "name": "inputs",
                        "field": {
                          "type": "json"
                        },
                        "type": "array"
                      },
                      {
                        "name": "name",
                        "type": "string"
                      },
                      {
                        "name": "outputs",
                        "field": {
                          "type": "json"
                        },
                        "type": "array"
                      },
                      { "name": "payable", "type": "boolean" },
                      { "name": "stateMutability", "type": "string" },
                      {
                        "name": "type",
                        "type": "string",
                        "required": true
                      },
                      {
                        "name": "gas",
                        "type": "number",
                        "format": "double"
                      }
                    ],
                    "additionalProperties": false,
                    "example": {}
                  },
                  { "name": "topic0", "type": "string" },
                  { "name": "callFrom", "type": "string" }
                ]
              },
              {
                "name": "id",
                "type": "string",
                "description": "Stringified UUIDv4.\nSee [RFC 4112](https://tools.ietf.org/html/rfc4122)",
                "format": "uuid",
                "pattern": "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"
              },
              {
                "name": "status",
                "type": "string",
                "description": "The stream status:\n[active] The Stream is healthy and processing blocks\n[paused] The Stream is paused and is not processing blocks\n[error] The Stream has encountered an error and is not processing blocks",
                "enum": ["active", "paused", "error", "terminated"]
              },
              {
                "name": "statusMessage",
                "type": "string",
                "description": "Description of current status of stream."
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from \"moralis\";\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n    // ...and any other configuration\n  });\n  \nconst id = \"id-1\";\nconst status = \"paused\";\n\n  const { result } = await Moralis.Streams.updateStatus({\n  id,\n  status,\n});\n\n  console.log(result);\n} catch (e) {\n  console.error(e);\n}",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import streams\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"id\": \"\", \n}\nbody = {\n    \"status\": \"\", \n}\n\nresult = streams.evm.update_stream_status(\n    api_key=api_key,\n    params=params,\n    body=body,\n)\n\nprint(result)\n"
        }
      ]
    },
    "GetAddresses": {
      "apiHost": "https://api.moralis-streams.com",
      "summary": "Get addresses by stream",
      "description": "Get all addresses associated with a specific stream.",
      "method": "GET",
      "path": "/streams/evm/:id/address",
      "pathParams": [
        {
          "name": "id",
          "description": "the id of the stream to get the addresses from",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [
        {
          "name": "limit",
          "description": "Limit response results max value 100",
          "required": true,
          "type": "number"
        },
        {
          "name": "cursor",
          "description": "Cursor for fetching next page",
          "required": false,
          "type": "string"
        }
      ],
      "responses": [
        {
          "status": "200",
          "description": "Ok",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "result",
                "type": "object",
                "description": "Array of project Streams",
                "fields": [
                  {
                    "name": "address",
                    "type": "string",
                    "description": "Address"
                  }
                ]
              },
              {
                "name": "cursor",
                "type": "string",
                "description": "Cursor for fetching next page"
              },
              {
                "name": "total",
                "type": "number",
                "description": "Total count of streams on the project"
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from \"moralis\";\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n    // ...and any other configuration\n  });\n  \nconst id = \"id-1\";\n\n  const { result } = await Moralis.Streams.getAddresses({\n  id,\n});\n\n  console.log(result);\n} catch (e) {\n  console.error(e);\n}",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import streams\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"id\": \"\", \n    \"limit\": 1.2, \n    \"cursor\": \"\", \n}\n\nresult = streams.evm.get_addresses(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "AddAddressToStream": {
      "apiHost": "https://api.moralis-streams.com",
      "summary": "Add address to stream",
      "description": "Adds an address to a Stream.",
      "method": "POST",
      "path": "/streams/evm/:id/address",
      "pathParams": [
        {
          "name": "id",
          "description": "The id of the stream to add the address to",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [],
      "bodyParam": {
        "required": true,
        "description": "Provide a Address Model",
        "type": "object",
        "fields": [
          {
            "name": "address",
            "description": "The address or a list of addresses to be added to the Stream.",
            "type": "oneOf",
            "options": [
              { "type": "string" },
              { "field": { "type": "string" }, "type": "array" }
            ]
          }
        ]
      },
      "responses": [
        {
          "status": "200",
          "description": "Ok",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "streamId",
                "type": "string",
                "description": "The streamId"
              },
              {
                "name": "address",
                "description": "Address",
                "type": "oneOf",
                "options": [
                  { "type": "string" },
                  { "field": { "type": "string" }, "type": "array" }
                ]
              }
            ]
          }
        }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from \"moralis\";\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n    // ...and any other configuration\n  });\n  \n  const id = \"id-1\";\n  const address = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\", //EVM wallet address\n\n  const { result } = await Moralis.Streams.addAddress({\n    id,\n    address\n  });\n\n  console.log(result);\n} catch (e) {\n  console.error(e);\n}",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import streams\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"id\": \"\", \n    \"limit\": 1.2, \n    \"cursor\": \"\", \n}\n\nresult = streams.evm.get_addresses(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "DeleteAddressFromStream": {
      "apiHost": "https://api.moralis-streams.com",
      "summary": "Delete address from stream",
      "description": "Deletes an address from a Stream.",
      "method": "DELETE",
      "path": "/streams/evm/:id/address",
      "pathParams": [
        {
          "name": "id",
          "description": "The id of the stream to delete the address from",
          "required": true,
          "type": "string"
        }
      ],
      "queryParams": [],
      "bodyParam": {
        "required": true,
        "description": "Provide a Address Model",
        "type": "object",
        "fields": [
          {
            "name": "address",
            "description": "The address or a list of addresses to be removed from the Stream.",
            "type": "oneOf",
            "options": [
              { "type": "string" },
              { "field": { "type": "string" }, "type": "array" }
            ]
          }
        ]
      },
      "responses": [
        {
          "status": "200",
          "description": "Ok",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "streamId",
                "type": "string",
                "description": "The streamId"
              },
              {
                "name": "address",
                "description": "Address",
                "type": "oneOf",
                "options": [
                  { "type": "string" },
                  { "field": { "type": "string" }, "type": "array" }
                ]
              }
            ]
          }
        }
      ]
    }
  },
  "solana": {
    "balance": {
      "apiHost": "https://solana-gateway.moralis.io",
      "summary": "Get native balance by wallet",
      "description": "Gets the native balance owned by a given network and address.",
      "method": "GET",
      "path": "/account/:network/:address/balance",
      "pathParams": [
        {
          "name": "network",
          "description": "The network to query",
          "required": true,
          "type": "string",
          "enum": ["mainnet", "testnet"],
          "example": "mainnet"
        },
        {
          "name": "address",
          "description": "The address for which the native balance will be checked",
          "required": true,
          "type": "string",
          "example": "EJpLyTeE8XHG9CeREeHd6pr6hNhaRnTRJx4Z5DPhEJJ6"
        }
      ],
      "queryParams": [],
      "responses": [
        {
          "status": "200",
          "description": "",
          "body": {
            "type": "object",
            "fields": [
              { "name": "solana", "type": "string" },
              { "name": "lamports", "type": "string" }
            ]
          }
        },
        { "status": "400", "description": "" }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from 'moralis';\nimport { SolNetwork, SolAddress } from \"@moralisweb3/sol-utils\";\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n  });\n\n  const address = SolAddress.create(\n    \"HsXZnF7Te7dZ5ijvGcDj3NWtxRBBaAuYQgh1oZLwAba2\"\n  );\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getBalance({\n    network,\n    address,\n  });\n\n  console.log(response?.result);\n} catch (e) {\n  console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"network\": \"\", \n    \"address\": \"\", \n}\n\nresult = sol_api.account.balance(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getSPL": {
      "apiHost": "https://solana-gateway.moralis.io",
      "summary": "Get token balance by wallet",
      "description": "Gets the token balances owned by a given network and address.",
      "method": "GET",
      "path": "/account/:network/:address/tokens",
      "pathParams": [
        {
          "name": "network",
          "description": "The network to query",
          "required": true,
          "type": "string",
          "enum": ["mainnet", "testnet"],
          "example": "mainnet"
        },
        {
          "name": "address",
          "description": "The address for which token balances will be checked",
          "required": true,
          "type": "string",
          "example": "EJpLyTeE8XHG9CeREeHd6pr6hNhaRnTRJx4Z5DPhEJJ6"
        }
      ],
      "queryParams": [],
      "responses": [
        { "status": "200", "description": "" },
        { "status": "400", "description": "" }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from 'moralis';\nimport { SolNetwork, SolAddress } from \"@moralisweb3/sol-utils\";\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n  });\n\n  const address = SolAddress.create(\n    \"HsXZnF7Te7dZ5ijvGcDj3NWtxRBBaAuYQgh1oZLwAba2\"\n  );\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getSPL({\n    network,\n    address,\n  });\n\n  console.log(response?.result);\n} catch (e) {\n  console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"network\": \"\", \n    \"address\": \"\", \n}\n\nresult = sol_api.account.get_spl(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getNFTs": {
      "apiHost": "https://solana-gateway.moralis.io",
      "summary": "Get NFTs by wallet",
      "description": "Gets NFTs owned by a given network and address.",
      "method": "GET",
      "path": "/account/:network/:address/nft",
      "pathParams": [
        {
          "name": "network",
          "description": "The network to query",
          "required": true,
          "type": "string",
          "enum": ["mainnet", "testnet"],
          "example": "mainnet"
        },
        {
          "name": "address",
          "description": "The address of the contract",
          "required": true,
          "type": "string",
          "example": "EJpLyTeE8XHG9CeREeHd6pr6hNhaRnTRJx4Z5DPhEJJ6"
        }
      ],
      "queryParams": [],
      "responses": [
        { "status": "200", "description": "" },
        { "status": "400", "description": "" }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from 'moralis';\nimport { SolNetwork, SolAddress } from \"@moralisweb3/sol-utils\";\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n  });\n\n  const address = SolAddress.create(\n    \"HsXZnF7Te7dZ5ijvGcDj3NWtxRBBaAuYQgh1oZLwAba2\"\n  );\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getNFTs({\n    address,\n    network,\n  });\n\n  console.log(response?.result);\n} catch (e) {\n  console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"network\": \"\", \n    \"address\": \"\", \n}\n\nresult = sol_api.account.get_nfts(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getPortfolio": {
      "apiHost": "https://solana-gateway.moralis.io",
      "summary": "Gets portfolio by wallet",
      "description": "Gets the portfolio for a given network and address.",
      "method": "GET",
      "path": "/account/:network/:address/portfolio",
      "pathParams": [
        {
          "name": "network",
          "description": "The network to query",
          "required": true,
          "type": "string",
          "enum": ["mainnet", "testnet"],
          "example": "mainnet"
        },
        {
          "name": "address",
          "description": "The address of the token contract",
          "required": true,
          "type": "string",
          "example": "EJpLyTeE8XHG9CeREeHd6pr6hNhaRnTRJx4Z5DPhEJJ6"
        }
      ],
      "queryParams": [],
      "responses": [
        {
          "status": "200",
          "description": "",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "nativeBalance",
                "type": "object",
                "fields": [
                  {
                    "name": "solana",
                    "type": "string",
                    "required": true
                  },
                  { "name": "lamports", "type": "string", "required": true }
                ]
              },
              {
                "name": "nfts",
                "type": "object",
                "fields": [
                  { "name": "associatedTokenAddress", "type": "string" },
                  { "name": "mint", "type": "string" },
                  { "name": "name", "type": "string" },
                  { "name": "symbol", "type": "string" }
                ]
              },
              {
                "name": "tokens",
                "type": "object",
                "fields": [
                  { "name": "associatedTokenAddress", "type": "string" },
                  { "name": "mint", "type": "string" },
                  { "name": "name", "type": "string" },
                  { "name": "symbol", "type": "string" },
                  { "name": "amount", "type": "string" },
                  { "name": "amountRaw", "type": "string" },
                  { "name": "decimals", "type": "number" }
                ]
              }
            ]
          }
        },
        { "status": "400", "description": "" }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from 'moralis';\nimport { SolNetwork, SolAddress } from \"@moralisweb3/sol-utils\";\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n  });\n\n  const address = SolAddress.create(\n    \"HsXZnF7Te7dZ5ijvGcDj3NWtxRBBaAuYQgh1oZLwAba2\"\n  );\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getPortfolio({\n    network,\n    address,\n  });\n\n  console.log(response?.result);\n} catch (e) {\n  console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"\", \n    \"network\": \"\", \n}\n\nresult = sol_api.account.get_portfolio(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getNFTMetadata": {
      "apiHost": "https://solana-gateway.moralis.io",
      "summary": "Get NFT metadata",
      "description": "Get the global NFT metadata for a given network and contract (mint, standard, name, symbol, metaplex).",
      "method": "GET",
      "path": "/nft/:network/:address/metadata",
      "pathParams": [
        {
          "name": "network",
          "description": "The network to query",
          "required": true,
          "type": "string",
          "enum": ["mainnet", "testnet"],
          "example": "mainnet"
        },
        {
          "name": "address",
          "description": "The address of the NFT program",
          "required": true,
          "type": "string",
          "example": "DDy5QHKEDgg5ZyWmwi1rJKwYHe7ZR5udGQfJkc8EPfLM"
        }
      ],
      "queryParams": [],
      "responses": [
        {
          "status": "200",
          "description": "",
          "body": {
            "type": "object",
            "fields": [
              { "name": "mint", "type": "string" },
              { "name": "standard", "type": "string" },
              { "name": "name", "type": "string" },
              { "name": "symbol", "type": "string" },
              {
                "name": "metaplex",
                "type": "object",
                "fields": [
                  { "name": "metadataUri", "type": "string", "required": true },
                  {
                    "name": "masterEdition",
                    "type": "boolean",
                    "required": true
                  },
                  { "name": "isMutable", "type": "boolean", "required": true },
                  {
                    "name": "primarySaleHappened",
                    "type": "boolean",
                    "required": true
                  },
                  {
                    "name": "sellerFeeBasisPoints",
                    "type": "number",
                    "required": true
                  },
                  {
                    "name": "updateAuthority",
                    "type": "string",
                    "required": true
                  }
                ]
              }
            ]
          }
        },
        { "status": "400", "description": "" }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from 'moralis';\nimport { SolNetwork, SolAddress } from \"@moralisweb3/sol-utils\";\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n  });\n\n  const address = SolAddress.create(\n    \"FVW9KoJxXzP2cCfhLfFC7hQKBZKnaoPkyZJQgvM9moWV\"\n  );\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.nft.getNFTMetadata({\n    address,\n    network,\n  });\n\n  console.log(response?.result);\n} catch (e) {\n  console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"\", \n    \"network\": \"\", \n}\n\nresult = sol_api.nft.get_nft_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    },
    "getTokenPrice": {
      "apiHost": "https://solana-gateway.moralis.io",
      "summary": "Get token price",
      "description": "Gets the token price (usd and native) for a given contract address and network.",
      "method": "GET",
      "path": "/token/:network/:address/price",
      "pathParams": [
        {
          "name": "network",
          "description": "The network to query",
          "required": true,
          "type": "string",
          "enum": ["mainnet", "testnet"],
          "example": "mainnet"
        },
        {
          "name": "address",
          "description": "The address of the SPL token program",
          "required": true,
          "type": "string",
          "example": "SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt"
        }
      ],
      "queryParams": [],
      "responses": [
        {
          "status": "200",
          "description": "",
          "body": {
            "type": "object",
            "fields": [
              {
                "name": "nativePrice",
                "type": "object",
                "fields": [
                  { "name": "value", "type": "string", "required": true },
                  { "name": "decimals", "type": "number", "required": true },
                  { "name": "name", "type": "string", "required": true },
                  { "name": "symbol", "type": "string", "required": true }
                ]
              },
              { "name": "usdPrice", "type": "number" },
              { "name": "exchangeAddress", "type": "string" },
              { "name": "exchangeName", "type": "string" }
            ]
          }
        },
        { "status": "400", "description": "" }
      ],
      "codeSamples": [
        {
          "language": "node",
          "code": "import Moralis from 'moralis';\nimport { SolNetwork, SolAddress } from \"@moralisweb3/sol-utils\";\n\ntry {\n  await Moralis.start({\n    apiKey: 'YOUR_API_KEY',\n  });\n\n  const address = SolAddress.create(\n    \"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"\n  );\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.token.getTokenPrice({\n    address,\n    network,\n  });\n\n  console.log(response?.result);\n} catch (e) {\n  console.error(e);\n}\n",
          "name": "Moralis NodeJS SDK"
        },
        {
          "language": "python",
          "code": "from moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"\", \n    \"network\": \"\", \n}\n\nresult = sol_api.token.get_token_price(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
        }
      ]
    }
  }
}
